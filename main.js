/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ProcessorProcessorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// task_definitions.json
var task_definitions_default = [
  {
    name: "Verify Subprocessor List URL",
    description: "Checks if a URL points to a current and valid subprocessor list for a specific company.",
    system_prompt: "You are an expert in data privacy and compliance documentation analysis.",
    user_prompt: `Goal: Your primary goal is to determine if the provided text from {url_content} is a subprocessor list that belongs to the {expected_processor_name} and is the current, active version.

Input Parameters:

{url_content}: The text content from a URL.

{expected_processor_name}: The name of the company for whom you are trying to find the subprocessor list.

CRITICAL RULE: The page must belong to the {expected_processor_name} as the primary company. Do NOT return 'isCorrectProcessor: true' if {expected_processor_name} is only mentioned as a sub-processor of another company. For example, if searching for 'Apple' and you find a list owned by 'Command Alkon' that lists Apple as one of its subprocessors, 'isCorrectProcessor' MUST be false.

Processing Steps:

1. Is it a Subprocessor List?
- Scan for explicit titles (e.g., "Subprocessor List").
- Look for a structured list/table of multiple distinct company names.
- If it is not a subprocessor list, all other checks are irrelevant.

2. Is it for the Correct Company?
- ONLY if it is a subprocessor list, analyze the page title, headings, and legal text to identify the company that OWNS the list.
- Compare the identified owner with the {expected_processor_name}, accounting for variations (e.g., 'AWS' for 'Amazon Web Services').
- If the list does not clearly belong to the {expected_processor_name}, the currency check is irrelevant.

3. Is the List Current?
- ONLY if it is a subprocessor list for the correct company, determine if it's the current version by looking for explicit archival notices or recent update dates (within the last 1-2 years is a good heuristic).`,
    llm_model_id: "01965cb4-73f4-9ec3-6f21-bede0391e2b4",
    output_format: {
      isSubprocessorList: { type: "boolean", description: "True if the content appears to be a list of subprocessors." },
      isCorrectProcessor: { type: "boolean", description: "True if the page content belongs to the 'expected_processor_name'." },
      isCurrentVersion: { type: "boolean", description: "True if the list appears to be the current, active version." },
      reasoning: { type: "string", description: "Briefly state the key evidence for your decision." },
      page_content: { type: "string", description: "The full text content fetched from the input URL." }
    },
    input_processors: [
      { param_name: "url_content", input_processor: "url_fetcher", config: { extract_text: true } }
    ],
    enabled: true
  },
  {
    name: "Extract Entities From Page Content",
    description: "Extracts and categorizes subprocessor and internal affiliate details from text content.",
    system_prompt: "You are an expert data extraction specialist, skilled at identifying and categorizing entities from unstructured text. Focus on accurately discerning third-party subprocessors from internal entities, extracting key details and organizing the information into a structured JSON format.",
    user_prompt: `Goal: Extract detailed information about third-party subprocessors and internal entities from a company's subprocessor information page.

Context: Subprocessor information pages typically list external companies (third-party subprocessors) that process data on behalf of the main company, as well as internal entities or affiliates. This information is often structured in sections with headings and may be formatted as tables using Markdown or HTML elements.

Input Parameters:
{page_text} - The text content from a company's subprocessor information page.

Processing Steps:
1. Analyze the provided text.
2. Identify sections for third-party subprocessors (e.g., "Third Party Sub-processors") and internal entities (e.g., "Our Group Companies").
3. For each third-party subprocessor, extract: name, processing function, and location.
4. For each internal entity, extract: name, role/function, and location.
5. Organize the extracted information into the required JSON structure.

Output Guidance:
Return a JSON object with two top-level keys: 'third_party_subprocessors' and 'own_entities', each a list of objects containing 'name', 'processing_function', and 'location'. If a category is empty, return an empty list. Use null for missing fields. If no distinction is made, classify all as 'third_party_subprocessors'.`,
    llm_model_id: "01965cb4-73f4-9ec3-6f21-bede0391e2b4",
    output_format: {
      third_party_subprocessors: {
        type: "list",
        item_type: "object",
        nested_structure: { name: { type: "string" }, processing_function: { type: "string" }, location: { type: "string" } }
      },
      own_entities: {
        type: "list",
        item_type: "object",
        nested_structure: { name: { type: "string" }, processing_function: { type: "string" }, location: { type: "string" } }
      }
    },
    input_processors: [],
    enabled: true
  },
  {
    name: "Deduplicate Subprocessors",
    description: "Identifies duplicate subprocessor pages in an Obsidian folder for merging.",
    system_prompt: "You are an AI assistant specialized in data organization and deduplication for Obsidian notes. Your task is to analyze a list of 'subprocessor_pages' and identify duplicates based on their name and aliases.",
    user_prompt: "Analyze the following list of subprocessor pages and identify any duplicates. For each set, determine a survivor and list the others to be merged.\n\nInput: {subprocessor_pages} (A list of objects, each with 'file_path', 'page_name', 'aliases').\n\nProcess:\n1. Normalize all names and aliases (lowercase, remove suffixes like 'inc', 'llc', 'corp', and generic terms like 'technologies', 'solutions').\n2. Group pages with identical or highly similar normalized identifiers.\n3. For each group, select one 'survivor' based on the most canonical name, highest alias count, or simplest file path.\n\nOutput: Return a JSON object with a 'deduplication_results' list. Each item should contain 'survivor_file_path', a 'duplicate_file_paths' list, and 'reasoning_for_survivor_choice'.",
    llm_model_id: "01965cb4-73f4-9ec3-6f21-bede0391e2b4",
    output_format: {
      deduplication_results: {
        type: "list",
        item_type: "object",
        nested_structure: {
          survivor_file_path: { type: "string" },
          duplicate_file_paths: { type: "list", item_type: "string" },
          reasoning_for_survivor_choice: { type: "string" }
        }
      }
    },
    input_processors: [],
    enabled: true
  },
  {
    name: "DDG SERP Parser",
    description: "Parses a DuckDuckGo search results page and returns a filtered list of relevant URLs.",
    system_prompt: "You are an AI assistant that functions as an expert web scraper and data extractor. Your primary goal is to analyze the provided HTML content of a search engine results page (SERP) from DuckDuckGo and extract individual organic search results.",
    user_prompt: "The input parameter '{search_url_to_process}' contains the full HTML content of a DuckDuckGo search results page. Your task is to meticulously parse this HTML and extract each organic search result's 'title', 'url', and 'snippet'. Return your findings as a JSON object with a key 'search_results', which holds a list of objects.",
    llm_model_id: "01965cb4-73f4-9ec3-6f21-bede0391e2b4",
    output_format: {
      search_results: {
        type: "list",
        item_type: "object",
        nested_structure: { title: { type: "string" }, url: { type: "string" }, snippet: { type: "string" } }
      }
    },
    input_processors: [
      { param_name: "search_url_to_process", input_processor: "url_fetcher", config: { extract_text: true } }
    ],
    enabled: true
  },
  {
    name: "Find DPA URL",
    description: "Finds the canonical URL for a company's Data Processing Agreement (DPA).",
    system_prompt: "You are a specialized AI assistant proficient in legal document retrieval. Focus on quickly identifying and validating the official DPA URL using efficient search strategies.",
    user_prompt: `Your sole purpose is to find the canonical URL for the Data Processing Agreement (DPA) of the given {company_name}. Formulate precise search queries (e.g., '"{company_name}" data processing agreement'), prioritize links from the company's official domains, and verify the page contains the actual DPA document. Your response MUST be a single, valid JSON object with one key: 'url'. If not found, the value must be null.`,
    llm_model_id: "01965cb4-73f4-9ec3-6f21-bede0391e2b4",
    output_format: { url: "string" },
    input_processors: [],
    enabled: true
  },
  {
    name: "Find ToS URL",
    description: "Finds the canonical URL for a company's Terms of Service (ToS).",
    system_prompt: "You are a highly skilled web researcher, adept at navigating complex websites and legal documents. Focus on identifying the most relevant URL for a company's official Terms of Service.",
    user_prompt: "Your sole purpose is to find the canonical URL for the main customer Terms of Service (ToS) of the given {company_name}. Be aware of alternate names like 'Master Service Agreement' or 'General Terms.' Prioritize official domains and ensure the page contains the actual legal agreement, not a summary. Your response MUST be a single, valid JSON object with one key: 'url'. If not found, the value must be null.",
    llm_model_id: "01965cb4-73f4-9ec3-6f21-bede0391e2b4",
    output_format: { url: "string" },
    input_processors: [],
    enabled: true
  },
  {
    name: "Find Security Page URL",
    description: "Finds the canonical URL for a company's primary Security or Trust page.",
    system_prompt: "You are a world-class cybersecurity researcher, skilled at finding key information. Locate the most authoritative security information source and return the URL.",
    user_prompt: "Find the canonical URL for the primary Security or Trust page of the given {company_name}. These pages serve as central repositories for security practices and certifications. Prioritize official domains (e.g., company.com, trust.company.com) and pages that comprehensively address security. Your response MUST be a single, valid JSON object with one key: 'url'. If not found, the value must be null.",
    llm_model_id: "01965cb4-73f4-9ec3-6f21-bede0391e2b4",
    output_format: { url: "string" },
    input_processors: [],
    enabled: true
  }
];

// main.ts
var SUBPROCESSOR_URL_KEYWORDS = [
  "subprocessor",
  "sub-processor",
  "sub_processor",
  "vendor-list",
  "vendorlist",
  "third-party-list",
  "thirdpartylist",
  "service-providers",
  "serviceproviders",
  "dpa-exhibit",
  "dpa/exhibit",
  "data-processing-addendum/exhibit",
  "trust-center/sub",
  "legal/subprocessors"
];
var DEFAULT_SETTINGS = {
  serpApiKey: "",
  rightbrainClientId: "",
  rightbrainClientSecret: "",
  rightbrainOrgId: "",
  rightbrainProjectId: "",
  rightbrainApiUrl: "https://app.rightbrain.ai/api/v1",
  rightbrainOauth2Url: "https://oauth.rightbrain.ai",
  rightbrainVerifyUrlTaskId: "",
  rightbrainExtractEntitiesTaskId: "",
  rightbrainExtractInputField: "page_text",
  rightbrainExtractOutputThirdPartyField: "third_party_subprocessors",
  rightbrainExtractOutputOwnEntitiesField: "own_entities",
  rightbrainDeduplicateSubprocessorsTaskId: "",
  rightbrainDuckDuckGoSearchTaskId: "",
  createPagesForOwnEntities: false,
  verboseDebug: false,
  maxResultsPerProcessor: 1,
  maxRecursiveDepth: 2,
  discoveryCacheDays: 30,
  processorsFolderPath: "Processors",
  analysisLogsFolderPath: "Analysis Logs",
  rightbrainFindDpaTaskId: "",
  rightbrainFindTosTaskId: "",
  rightbrainFindSecurityTaskId: ""
};
var ProcessorProcessorPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.processedInCurrentRecursiveSearch = /* @__PURE__ */ new Set();
    await this.loadSettings();
    this.addRibbonIcon("link", "Manually Add Subprocessor List URL", (evt) => {
      new ManualInputModal(this.app, async (processorName, listUrl, isPrimary) => {
        if (processorName && listUrl) {
          new import_obsidian.Notice(`Processing manual URL input for: ${processorName}`);
          const processorFile = await this.ensureProcessorFile(processorName, true, isPrimary);
          if (processorFile) {
            const searchData = await this.fetchDataFromDirectUrl(processorName, listUrl);
            if (searchData) {
              await this.persistSubprocessorInfo(processorName, processorFile, searchData, isPrimary);
              if (searchData.flaggedCandidateUrlCount > 0) {
                new import_obsidian.Notice(`${searchData.flaggedCandidateUrlCount} URL(s) looked promising but couldn't be verified. Check logs.`);
              }
            } else {
              new import_obsidian.Notice(`Could not process data from direct URL for ${processorName}.`);
            }
          } else {
            new import_obsidian.Notice(`Could not create or find file for ${processorName} in ${this.settings.processorsFolderPath}`);
          }
        }
      }).open();
    });
    this.addRibbonIcon("paste", "Input Subprocessor List from Text", (evt) => {
      this.openManualTextEntryModal();
    });
    this.addCommand({
      id: "run-processor-search-global",
      name: "Search for Subprocessors (Discover)",
      callback: () => {
        new SearchModal(this.app, this.settings, async (processorName) => {
          if (processorName) {
            new import_obsidian.Notice(`Starting discovery search for: ${processorName}`);
            const processorFile = await this.ensureProcessorFile(processorName, true);
            if (processorFile) {
              await this.discoverAndProcessProcessorPage(processorName, processorFile);
            } else {
              new import_obsidian.Notice(`Could not create or find file for ${processorName} in ${this.settings.processorsFolderPath}`);
            }
          }
        }).open();
      }
    });
    this.addCommand({
      id: "input-subprocessor-list-from-text",
      name: "Input Subprocessor List from Text",
      callback: () => {
        this.openManualTextEntryModal();
      }
    });
    this.addCommand({
      id: "run-processor-search-recursive",
      // New ID
      name: "Search for Subprocessors (Recursive Discover)",
      callback: () => {
        new SearchModal(this.app, this.settings, async (processorName) => {
          if (processorName) {
            await this.discoverRecursively(processorName, void 0, this.plugin.settings.maxRecursiveDepth);
          }
        }).open();
      }
    });
    this.addCommand({
      id: "force-merge-processors-from-palette",
      name: "Force Merge processor files...",
      callback: () => {
        this.openFileSelectorMergeModal();
      }
    });
    this.addCommand({
      id: "complete-first-time-setup",
      name: "Complete First-Time Setup (Credentials & Tasks)",
      callback: () => {
        new PasteEnvModal(this.app, this).open();
      }
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, fileOrFolder, source) => {
        if (fileOrFolder instanceof import_obsidian.TFolder) {
          const folder = fileOrFolder;
          if (folder.path === this.settings.processorsFolderPath) {
            menu.addItem((item) => {
              item.setTitle("Deduplicate Subprocessor Pages").setIcon("git-pull-request-draft").onClick(async () => {
                if (!this.settings.rightbrainDeduplicateSubprocessorsTaskId) {
                  new import_obsidian.Notice("Deduplication Task ID not set in plugin settings.");
                  return;
                }
                new import_obsidian.Notice(`Starting deduplication for folder: ${folder.path}`);
                await this.runDeduplicationForFolder(folder);
              });
            });
          }
        } else if (fileOrFolder instanceof import_obsidian.TFile && fileOrFolder.extension === "md") {
          const file = fileOrFolder;
          if (file.path.startsWith(this.settings.processorsFolderPath + "/")) {
            const fileCache = this.app.metadataCache.getFileCache(file);
            const frontmatter = fileCache == null ? void 0 : fileCache.frontmatter;
            const originalProcessorName = (frontmatter == null ? void 0 : frontmatter.aliases) && Array.isArray(frontmatter.aliases) && frontmatter.aliases.length > 0 ? frontmatter.aliases[0] : file.basename;
            menu.addItem((item) => {
              item.setTitle("Map Subprocessor Relationships").setIcon("chevrons-down-up").onClick(async () => {
                new import_obsidian.Notice(`Starting recursive discovery from: ${originalProcessorName}`);
                await this.discoverRecursively(originalProcessorName, file, this.settings.maxRecursiveDepth);
              });
            });
            menu.addItem((item) => {
              item.setTitle("Discover Subprocessor List").setIcon("wand").onClick(async () => {
                new import_obsidian.Notice(`Discovering subprocessor list for: ${originalProcessorName}`);
                await this.discoverAndProcessProcessorPage(originalProcessorName, file);
              });
            });
            menu.addItem((item) => {
              item.setTitle("Enrich Processor Documentation").setIcon("book-plus").onClick(async () => {
                new import_obsidian.Notice(`Enriching documentation for: ${originalProcessorName}`);
                await this.enrichProcessorFile(originalProcessorName, file);
              });
            });
            menu.addItem((item) => {
              item.setTitle("Add Subprocessor List URL").setIcon("plus-circle").onClick(async () => {
                new ManualInputModal(this.app, async (pName, listUrl, isPrimary) => {
                  if (listUrl) {
                    new import_obsidian.Notice(`Processing manual URL input for: ${originalProcessorName} using URL: ${listUrl}`);
                    const searchData = await this.fetchDataFromDirectUrl(originalProcessorName, listUrl);
                    if (searchData) {
                      await this.persistSubprocessorInfo(originalProcessorName, file, searchData, isPrimary);
                      if (searchData.flaggedCandidateUrlCount > 0) {
                        new import_obsidian.Notice(`${searchData.flaggedCandidateUrlCount} URL(s) looked promising but couldn't be verified. Check logs.`);
                      }
                    } else {
                      new import_obsidian.Notice(`Could not process data from direct URL for ${originalProcessorName}.`);
                    }
                  }
                }, originalProcessorName).open();
              });
            });
            menu.addItem((item) => {
              item.setTitle("Input Subprocessor List from Text").setIcon("file-input").onClick(async () => {
                this.openManualTextEntryModal(originalProcessorName);
              });
            });
          }
        }
      })
    );
    this.addSettingTab(new ProcessorProcessorSettingTab(this.app, this));
    console.log("Processor Processor plugin loaded.");
  }
  onunload() {
    console.log("Processor Processor plugin unloaded.");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  openManualTextEntryModal(initialProcessorName) {
    if (!this.settings.rightbrainExtractEntitiesTaskId) {
      new import_obsidian.Notice("RightBrain Task ID for entity extraction is not configured. Please set it in plugin settings.");
      return;
    }
    new ManualTextEntryModal(this.app, async (processorName, pastedText, isPrimary) => {
      if (processorName && pastedText) {
        new import_obsidian.Notice(`Processing pasted text for: ${processorName}`);
        const processorFile = await this.ensureProcessorFile(processorName, true, isPrimary);
        if (processorFile) {
          const searchData = await this.fetchDataFromPastedText(processorName, pastedText);
          if (searchData) {
            await this.persistSubprocessorInfo(processorName, processorFile, searchData, isPrimary);
          } else {
            new import_obsidian.Notice(`Could not process data from pasted text for ${processorName}.`);
          }
        } else {
          new import_obsidian.Notice(`Could not create or find file for ${processorName} in ${this.settings.processorsFolderPath}`);
        }
      }
    }, initialProcessorName).open();
  }
  sanitizeNameForFilePathAndAlias(entityName) {
    const originalName = (entityName || "Unknown Entity").trim();
    let baseNameForFile = originalName;
    const dbaRegex = /^(.*?)\s+(?:dba|d\/b\/a|doing business as)\s+(.*)$/i;
    const dbaMatch = originalName.match(dbaRegex);
    if (dbaMatch && dbaMatch[2]) {
      baseNameForFile = dbaMatch[2].trim();
    }
    let filePathName = baseNameForFile.replace(/,/g, "");
    filePathName = filePathName.replace(/[\\/:*?"<>|]/g, "").trim();
    if (!filePathName) {
      filePathName = originalName.replace(/[\\/:*?"<>|,]/g, "").replace(/\s+/g, "_") || "Sanitized_Entity";
    }
    if (!filePathName) {
      filePathName = "Sanitized_Entity_" + Date.now();
    }
    return {
      filePathName,
      originalNameAsAlias: originalName
      // The original full name is always used as an alias
    };
  }
  scrubHyperlinks(text) {
    if (!text) return "N/A";
    let scrubbedText = String(text);
    scrubbedText = scrubbedText.replace(/\[(.*?)\]\((?:.*?)\)/g, "$1");
    scrubbedText = scrubbedText.replace(/<a[^>]*>(.*?)<\/a>/gi, "$1");
    scrubbedText = scrubbedText.replace(/<[^>]+>/g, "");
    scrubbedText = scrubbedText.replace(/\s+/g, " ").trim();
    return scrubbedText || "N/A";
  }
  addRelationship(collectedRelationships, seenRelationships, processorName, entity, type, sourceUrl, verificationReasoning) {
    var _a;
    const originalEntityName = (_a = entity.name) == null ? void 0 : _a.trim();
    if (!originalEntityName) return 0;
    const subprocessorNameToStore = originalEntityName;
    if (processorName.toLowerCase() === "openai" && type === "is_own_entity") {
      const openaiAffiliates = ["openai global", "openai, opco", "openai ireland", "openai uk", "openai japan", "openaiglobal", "openai opco", "openai llc"];
      if (openaiAffiliates.some((aff) => originalEntityName.toLowerCase().includes(aff)) || originalEntityName.toLowerCase() === "openai") {
        return 0;
      }
    }
    const relTuple = `${processorName}|${subprocessorNameToStore}|${type}`;
    if (!seenRelationships.has(relTuple)) {
      collectedRelationships.push({
        PrimaryProcessor: processorName,
        SubprocessorName: subprocessorNameToStore,
        // Store the original name
        ProcessingFunction: this.scrubHyperlinks(entity.processing_function),
        Location: this.scrubHyperlinks(entity.location),
        RelationshipType: type,
        SourceURL: sourceUrl,
        VerificationReasoning: this.scrubHyperlinks(verificationReasoning)
      });
      seenRelationships.add(relTuple);
      return 1;
    }
    return 0;
  }
  async discoverAndProcessProcessorPage(processorName, processorFile) {
    new import_obsidian.Notice(`Processing (discovery): ${processorName}...`);
    const searchData = await this.fetchProcessorSearchDataWithDiscovery(processorName);
    if (searchData) {
      await this.persistSubprocessorInfo(processorName, processorFile, searchData);
      if (searchData.flaggedCandidateUrlCount > 0) {
        new import_obsidian.Notice(`${searchData.flaggedCandidateUrlCount} URL(s) looked promising but couldn't be verified. Check Analysis Log for details and consider using the 'Input from Text' feature.`);
      }
    } else {
      new import_obsidian.Notice(`Failed to fetch data via discovery for ${processorName}.`);
    }
  }
  async enrichProcessorFile(processorName, file) {
    var _a;
    new import_obsidian.Notice(`Fetching compliance documents for ${processorName}...`, 5e3);
    const rbToken = await this.getRightBrainAccessToken();
    if (!rbToken) {
      new import_obsidian.Notice("Failed to get RightBrain token. Aborting enrichment.");
      return;
    }
    const documentTypes = [
      { type: "DPA", taskId: this.settings.rightbrainFindDpaTaskId, title: "Data Processing Agreement" },
      { type: "ToS", taskId: this.settings.rightbrainFindTosTaskId, title: "Terms of Service" },
      { type: "Security", taskId: this.settings.rightbrainFindSecurityTaskId, title: "Security Documentation" }
    ];
    const foundDocuments = [];
    for (const doc of documentTypes) {
      if (!doc.taskId) {
        if (this.settings.verboseDebug) console.log(`Skipping ${doc.type} search for ${processorName}, no Task ID set.`);
        continue;
      }
      const taskInputPayload = { "company_name": processorName };
      const taskResult = await this.callRightBrainTask(doc.taskId, taskInputPayload, rbToken);
      if (((_a = taskResult == null ? void 0 : taskResult.response) == null ? void 0 : _a.url) && this.isValidUrl(taskResult.response.url)) {
        foundDocuments.push({ title: doc.title, url: taskResult.response.url });
        if (this.settings.verboseDebug) console.log(`Found ${doc.type} for ${processorName}: ${taskResult.response.url}`);
      } else {
        if (this.settings.verboseDebug) console.warn(`Could not find valid URL for ${doc.type} for ${processorName}. Result:`, taskResult);
      }
      await new Promise((resolve) => setTimeout(resolve, 500));
    }
    if (foundDocuments.length === 0) {
      new import_obsidian.Notice(`No new compliance documents found for ${processorName}.`);
      return;
    }
    let markdownContent = "\n";
    foundDocuments.forEach((doc) => {
      markdownContent += `- **${doc.title}:** [${doc.url}](${doc.url})
`;
    });
    const heading = "Compliance Documentation";
    await this.app.vault.process(file, (content) => {
      return this.ensureHeadingAndSection(content, heading, markdownContent, null, null, true);
    });
    new import_obsidian.Notice(`Successfully added ${foundDocuments.length} document link(s) to ${processorName}.`);
  }
  async setupRightBrainTasks(creds) {
    new import_obsidian.Notice("Starting RightBrain task setup...", 3e3);
    const rbToken = await this.getRightBrainAccessToken(creds);
    if (!rbToken) {
      new import_obsidian.Notice("Setup failed: Could not get RightBrain Access Token with provided credentials.");
      return;
    }
    const existingTasks = await this.listAllRightBrainTasks(rbToken, creds);
    if (existingTasks === null) {
      new import_obsidian.Notice("Setup failed: Could not retrieve existing tasks from RightBrain.");
      return;
    }
    const existingTaskNames = new Set(existingTasks.map((task) => task.name));
    let tasksCreated = 0;
    let tasksSkipped = 0;
    for (const taskDef of task_definitions_default) {
      if (existingTaskNames.has(taskDef.name)) {
        new import_obsidian.Notice(`Task '${taskDef.name}' already exists. Skipping.`);
        tasksSkipped++;
      } else {
        new import_obsidian.Notice(`Creating task: '${taskDef.name}'...`);
        const createdTask = await this.createRightBrainTask(rbToken, taskDef, creds);
        if (createdTask) {
          tasksCreated++;
        }
      }
    }
    new import_obsidian.Notice(`Setup complete. Created: ${tasksCreated} task(s), Skipped: ${tasksSkipped} existing task(s).`, 1e4);
  }
  /**
   * Fetches a list of all tasks from the configured RightBrain project.
   * @param rbToken The RightBrain access token.
   * @returns An array of task objects or null if an error occurs.
   */
  async listAllRightBrainTasks(rbToken, creds) {
    const tasksUrl = `${creds.apiUrl}/org/${creds.orgId}/project/${creds.projectId}/task`;
    const headers = { "Authorization": `Bearer ${rbToken}` };
    try {
      const response = await (0, import_obsidian.requestUrl)({ url: tasksUrl, method: "GET", headers, throw: false });
      if (response.status === 200) {
        return response.json.tasks || [];
      } else {
        console.error("Failed to list RightBrain tasks:", response.status, response.text);
        return null;
      }
    } catch (error) {
      console.error("Error fetching RightBrain tasks:", error);
      return null;
    }
  }
  /**
   * Creates a single new task in RightBrain using a provided definition.
   * @param rbToken The RightBrain access token.
   * @param taskDefinition An object containing the full configuration for the new task.
   * @returns The created task object or null if an error occurs.
   */
  async createRightBrainTask(rbToken, taskDefinition, creds) {
    const createUrl = `${creds.apiUrl}/org/${creds.orgId}/project/${creds.projectId}/task`;
    const headers = {
      "Authorization": `Bearer ${rbToken}`,
      "Content-Type": "application/json"
    };
    try {
      const response = await (0, import_obsidian.requestUrl)({
        url: createUrl,
        method: "POST",
        headers,
        body: JSON.stringify(taskDefinition),
        throw: false
      });
      if (response.status === 201 || response.status === 200) {
        new import_obsidian.Notice(`Successfully created task: '${taskDefinition.name}'`);
        return response.json;
      } else {
        new import_obsidian.Notice(`Failed to create task '${taskDefinition.name}': ${response.status}`, 7e3);
        console.error(`Error creating task '${taskDefinition.name}':`, response.status, response.text);
        return null;
      }
    } catch (error) {
      console.error(`Network error creating task '${taskDefinition.name}':`, error);
      return null;
    }
  }
  async persistSubprocessorInfo(processorName, processorFile, searchData, isTopLevelProcessor = true, mergeDecisions = []) {
    new import_obsidian.Notice(`Persisting info for: ${processorName}...`);
    await this.ensureFolderExists(this.settings.processorsFolderPath);
    await this.ensureFolderExists(this.settings.analysisLogsFolderPath);
    const { collectedRelationships, processedUrlDetails } = searchData;
    await this.updateProcessorFile(processorFile, processorName, collectedRelationships, isTopLevelProcessor);
    const uniqueTargetEntityOriginalNames = Array.from(new Set(collectedRelationships.map((r) => r.SubprocessorName)));
    const createdPagesForThisRun = /* @__PURE__ */ new Set();
    for (const targetEntityOriginalName of uniqueTargetEntityOriginalNames) {
      const { filePathName: targetEntityFilePathName } = this.sanitizeNameForFilePathAndAlias(targetEntityOriginalName);
      if (createdPagesForThisRun.has(targetEntityFilePathName)) {
        continue;
      }
      const relationsWhereThisEntityIsTarget = collectedRelationships.filter((r) => r.SubprocessorName === targetEntityOriginalName);
      if (relationsWhereThisEntityIsTarget.length === 0) {
        continue;
      }
      const isEverUsedAsSubprocessor = relationsWhereThisEntityIsTarget.some((r) => r.RelationshipType === "uses_subprocessor");
      const isOwnEntityOfCurrentPrimaryProcessor = relationsWhereThisEntityIsTarget.some(
        (r) => r.PrimaryProcessor === processorName && r.RelationshipType === "is_own_entity"
      );
      let shouldCreatePage = false;
      if (isEverUsedAsSubprocessor) {
        shouldCreatePage = true;
      } else if (isOwnEntityOfCurrentPrimaryProcessor) {
        if (this.settings.createPagesForOwnEntities) {
          shouldCreatePage = true;
        } else {
        }
      }
      if (shouldCreatePage) {
        const clientRelationshipsForTargetEntityPage = collectedRelationships.filter(
          (r) => r.SubprocessorName === targetEntityOriginalName && r.RelationshipType === "uses_subprocessor"
        );
        await this.createOrUpdateSubprocessorFile(
          targetEntityOriginalName,
          // The name of the subprocessor/own_entity itself
          processorName,
          // The primary processor context (for logging/tracking, not for content of subprocessor's page directly)
          clientRelationshipsForTargetEntityPage
          // Relationships where this entity is the subprocessor
        );
        createdPagesForThisRun.add(targetEntityFilePathName);
      }
    }
    await this.updateAnalysisLogPage(processorName, processedUrlDetails, collectedRelationships, mergeDecisions);
    new import_obsidian.Notice(`Finished persisting info for ${processorName}.`);
  }
  async searchViaRightBrainDuckDuckGo(processorName, rbToken) {
    var _a;
    if (!this.settings.rightbrainDuckDuckGoSearchTaskId) {
      new import_obsidian.Notice("DuckDuckGo Search Task ID is not configured. Please run the setup command or configure it in settings.", 1e4);
      return [];
    }
    const searchTaskId = this.settings.rightbrainDuckDuckGoSearchTaskId;
    const searchQueries = this.generateSearchQueries(processorName);
    const allResults = [];
    const queriesToProcess = searchQueries.slice(0, Math.min(searchQueries.length, 2));
    new import_obsidian.Notice(`Performing up to ${queriesToProcess.length} DuckDuckGo searches for ${processorName}...`, 5e3);
    for (const query of queriesToProcess) {
      const duckDuckGoUrl = `https://duckduckgo.com/?q=${encodeURIComponent(query)}&ia=web&kl=us-en&kp=-2`;
      const taskInputPayload = {
        search_url_to_process: duckDuckGoUrl,
        target_company_name: processorName
      };
      if (this.settings.verboseDebug) {
        console.log(`Calling RightBrain Task ${searchTaskId} for DDG search. URL: ${duckDuckGoUrl}, Target: ${processorName}`);
      }
      const taskRunResult = await this.callRightBrainTask(searchTaskId, taskInputPayload, rbToken);
      if (this.settings.verboseDebug && taskRunResult) {
        console.log(`Full RightBrain Response for DDG search query "${query}":`, JSON.stringify(taskRunResult, null, 2));
      }
      if (((_a = taskRunResult == null ? void 0 : taskRunResult.response) == null ? void 0 : _a.search_results) && Array.isArray(taskRunResult.response.search_results)) {
        const resultsList = taskRunResult.response.search_results;
        for (const result of resultsList) {
          if (result.url && result.title && (String(result.url).startsWith("http://") || String(result.url).startsWith("https://"))) {
            allResults.push({
              processorName,
              searchQuery: query,
              title: String(result.title),
              url: String(result.url),
              snippet: String(result.snippet || ""),
              documentType: "duckduckgo_rb_search_result"
            });
          }
        }
        if (this.settings.verboseDebug) {
          console.log(`Successfully processed ${resultsList.length} search results for query "${query}"`);
        }
      } else {
        new import_obsidian.Notice(`DDG search via RB for "${query.substring(0, 20)}..." yielded no valid results.`, 3e3);
        if (this.settings.verboseDebug) {
          console.warn(`RB Task for DDG Search for query "${query}" did not return expected '{ "search_results": [...] }' array or failed. Full taskRunResult:`, taskRunResult);
        }
      }
      await new Promise((resolve) => setTimeout(resolve, 700 + Math.random() * 500));
    }
    if (this.settings.verboseDebug) console.log(`searchViaRightBrainDuckDuckGo collected ${allResults.length} filtered candidates for ${processorName}`);
    return allResults;
  }
  async fetchProcessorSearchDataWithDiscovery(processorName) {
    const collectedRelationships = [];
    const seenRelationshipsInCurrentSearch = /* @__PURE__ */ new Set();
    const processedUrlDetails = [];
    let candidateUrlsInfo = [];
    let flaggedCandidateUrlCount = 0;
    const rbToken = await this.getRightBrainAccessToken();
    if (!rbToken) {
      new import_obsidian.Notice("Could not get RightBrain Access Token. Aborting discovery.", 7e3);
      return null;
    }
    if (this.settings.serpApiKey) {
      new import_obsidian.Notice(`Using SerpAPI for primary search for: ${processorName}`, 5e3);
      const searchQueries = this.generateSearchQueries(processorName);
      const serpApiResults = await this.searchSerpApiForDpas(processorName, searchQueries, this.settings.maxResultsPerProcessor);
      candidateUrlsInfo.push(...serpApiResults);
    } else if (this.settings.rightbrainOrgId && this.settings.rightbrainProjectId) {
      new import_obsidian.Notice(`SerpAPI key not configured. Using DuckDuckGo (Filtered Extractor Task) via RightBrain for: ${processorName}`, 5e3);
      candidateUrlsInfo = await this.searchViaRightBrainDuckDuckGo(processorName, rbToken);
    } else {
      new import_obsidian.Notice("No search method configured (SerpAPI or RightBrain for DDG). Aborting discovery.", 7e3);
    }
    const hardcodedTestUrls = {
      // "openai": [{ title: "Test OpenAI SubP List", url: "https://example.com/openai-subp", snippet: "", processorName: "openai", documentType: "hardcoded_test" }],
    };
    if (this.settings.verboseDebug && hardcodedTestUrls[processorName.toLowerCase()]) {
      if (this.settings.verboseDebug) console.log(`Adding hardcoded test URLs for ${processorName}`);
      candidateUrlsInfo.push(...hardcodedTestUrls[processorName.toLowerCase()]);
    }
    const additionalUrlsFromCandidatePages = [];
    const pagesToScanForMoreLinks = candidateUrlsInfo.filter(
      (item) => item.documentType === "dpa_or_subprocessor_list" || SUBPROCESSOR_URL_KEYWORDS.some((kw) => item.url.toLowerCase().includes(kw))
    );
    for (const pageItem of pagesToScanForMoreLinks) {
      const extracted = await this.extractUrlsFromDpaPage(pageItem.url, processorName, pageItem.title);
      additionalUrlsFromCandidatePages.push(...extracted);
    }
    candidateUrlsInfo.push(...additionalUrlsFromCandidatePages);
    const uniqueCandidateUrls = /* @__PURE__ */ new Map();
    candidateUrlsInfo.forEach((item) => {
      if (item.url && (item.url.startsWith("http://") || item.url.startsWith("https://")) && !uniqueCandidateUrls.has(item.url.replace(/\/$/, ""))) {
        uniqueCandidateUrls.set(item.url.replace(/\/$/, ""), item);
      }
    });
    const uniqueUrlsToProcess = Array.from(uniqueCandidateUrls.values());
    if (this.settings.verboseDebug) console.log(`Total unique URLs to verify for ${processorName}: ${uniqueUrlsToProcess.length}`);
    if (uniqueUrlsToProcess.length === 0 && candidateUrlsInfo.length > 0) {
      if (this.settings.verboseDebug) console.warn(`All candidate URLs were invalid or duplicates for ${processorName}. Original count: ${candidateUrlsInfo.length}`);
    } else if (uniqueUrlsToProcess.length === 0) {
      new import_obsidian.Notice(`No candidate URLs found to process for ${processorName}.`);
    }
    for (const urlInfo of uniqueUrlsToProcess) {
      if (processedUrlDetails.some((p) => p.url.replace(/\/$/, "") === urlInfo.url.replace(/\/$/, ""))) {
        if (this.settings.verboseDebug) console.log(`URL ${urlInfo.url} already processed in processedUrlDetails, skipping re-verification.`);
        continue;
      }
      let currentUrlExtractedCount = 0;
      let currentProcessedUrlInfo = { ...urlInfo, documentType: urlInfo.documentType || "duckduckgo_rb_search_result" };
      const verificationResult = await this.verifySubprocessorListUrl(urlInfo.url, processorName, rbToken);
      currentProcessedUrlInfo = {
        ...currentProcessedUrlInfo,
        verificationMethod: "rightbrain",
        isList: (verificationResult == null ? void 0 : verificationResult.isList) || false,
        isCurrent: (verificationResult == null ? void 0 : verificationResult.isCurrent) || false,
        verificationReasoning: (verificationResult == null ? void 0 : verificationResult.reasoning) || "N/A"
      };
      if ((verificationResult == null ? void 0 : verificationResult.isList) && verificationResult.isCurrent && verificationResult.isCorrectProcessor) {
        currentProcessedUrlInfo.documentType = "verified_current_subprocessor_list";
        if (verificationResult.pageContent) {
          const extractionResult = await this.extractEntitiesFromPageContent(verificationResult.pageContent, rbToken);
          if (extractionResult) {
            const { thirdPartySubprocessors, ownEntities } = extractionResult;
            thirdPartySubprocessors.forEach((e) => {
              currentUrlExtractedCount += this.addRelationship(collectedRelationships, seenRelationshipsInCurrentSearch, processorName, e, "uses_subprocessor", urlInfo.url, verificationResult.reasoning);
            });
            ownEntities.forEach((e) => {
              currentUrlExtractedCount += this.addRelationship(collectedRelationships, seenRelationshipsInCurrentSearch, processorName, e, "is_own_entity", urlInfo.url, verificationResult.reasoning);
            });
          } else {
            currentProcessedUrlInfo.documentType = "verified_current_subprocessor_list (rb_extraction_failed)";
          }
        } else {
          currentProcessedUrlInfo.documentType = "verified_current_subprocessor_list (no_content_for_extraction)";
        }
        currentProcessedUrlInfo.extractedSubprocessorsCount = currentUrlExtractedCount;
        processedUrlDetails.push(currentProcessedUrlInfo);
        if (currentUrlExtractedCount > 0) {
          if (this.settings.verboseDebug) console.log(`Found and processed a valid subprocessor list at ${urlInfo.url}. Stopping search.`);
          new import_obsidian.Notice(`Found valid list for ${processorName}. Finishing process.`);
          break;
        }
      } else {
        const urlLower = urlInfo.url.toLowerCase();
        const containsKeyword = SUBPROCESSOR_URL_KEYWORDS.some((keyword) => urlLower.includes(keyword));
        if (!(verificationResult == null ? void 0 : verificationResult.isList) && containsKeyword) {
          currentProcessedUrlInfo.documentType = "keyword_match_not_verified_list";
          flaggedCandidateUrlCount++;
        } else if ((verificationResult == null ? void 0 : verificationResult.isList) && !verificationResult.isCorrectProcessor) {
          currentProcessedUrlInfo.documentType = "verified_list_for_wrong_processor";
          flaggedCandidateUrlCount++;
        } else if (verificationResult == null ? void 0 : verificationResult.isList) {
          currentProcessedUrlInfo.documentType = "verified_subprocessor_list (not_current)";
        } else {
          currentProcessedUrlInfo.documentType = "not_a_subprocessor_list";
        }
        currentProcessedUrlInfo.extractedSubprocessorsCount = 0;
        processedUrlDetails.push(currentProcessedUrlInfo);
      }
    }
    return { collectedRelationships, processedUrlDetails, flaggedCandidateUrlCount };
  }
  async fetchDataFromDirectUrl(processorName, listUrl) {
    if (this.settings.verboseDebug) console.log(`Fetching data from direct URL for ${processorName}: ${listUrl}`);
    if (!this.isValidUrl(listUrl, processorName)) {
      new import_obsidian.Notice(`The provided URL for ${processorName} is not valid: ${listUrl}`);
      return null;
    }
    const collectedRelationships = [];
    const seenRelationshipsInCurrentSearch = /* @__PURE__ */ new Set();
    const processedUrlDetails = [];
    let flaggedCandidateUrlCount = 0;
    const directUrlInfoBase = {
      // Base info for this manually provided URL
      title: `Manually Provided List for ${processorName}`,
      url: listUrl,
      snippet: "Manually provided URL",
      processorName,
      documentType: "direct_input_list"
    };
    let currentProcessedUrlInfo = { ...directUrlInfoBase, url: listUrl, documentType: "direct_input_list" };
    const rbToken = await this.getRightBrainAccessToken();
    if (!rbToken) {
      new import_obsidian.Notice("Could not obtain RightBrain token for direct URL processing.");
      currentProcessedUrlInfo.verificationMethod = "N/A (No RB Token)";
      processedUrlDetails.push(currentProcessedUrlInfo);
      return { collectedRelationships, processedUrlDetails, flaggedCandidateUrlCount };
    }
    let currentUrlExtractedCount = 0;
    const verificationResult = await this.verifySubprocessorListUrl(listUrl, processorName, rbToken);
    currentProcessedUrlInfo.verificationMethod = "rightbrain";
    currentProcessedUrlInfo.isList = (verificationResult == null ? void 0 : verificationResult.isList) || false;
    currentProcessedUrlInfo.isCurrent = (verificationResult == null ? void 0 : verificationResult.isCurrent) || false;
    currentProcessedUrlInfo.verificationReasoning = (verificationResult == null ? void 0 : verificationResult.reasoning) || "N/A";
    if (verificationResult && verificationResult.isList && verificationResult.isCurrent) {
      new import_obsidian.Notice(`Verified manual URL: ${listUrl} as current list.`);
      currentProcessedUrlInfo.documentType = "verified_current_subprocessor_list (manual_url_input)";
      if (verificationResult.pageContent) {
        const extractionResult = await this.extractEntitiesFromPageContent(verificationResult.pageContent, rbToken);
        if (extractionResult) {
          const { thirdPartySubprocessors, ownEntities } = extractionResult;
          thirdPartySubprocessors.forEach((e) => {
            currentUrlExtractedCount += this.addRelationship(collectedRelationships, seenRelationshipsInCurrentSearch, processorName, e, "uses_subprocessor", listUrl, verificationResult.reasoning);
          });
          ownEntities.forEach((e) => {
            currentUrlExtractedCount += this.addRelationship(collectedRelationships, seenRelationshipsInCurrentSearch, processorName, e, "is_own_entity", listUrl, verificationResult.reasoning);
          });
        } else {
          currentProcessedUrlInfo.documentType = "verified_current_subprocessor_list (manual_url_input_rb_extraction_failed)";
        }
      } else {
        currentProcessedUrlInfo.documentType = "verified_current_subprocessor_list (manual_url_input_no_content)";
      }
    } else {
      const urlLower = listUrl.toLowerCase();
      const containsKeyword = SUBPROCESSOR_URL_KEYWORDS.some((keyword) => urlLower.includes(keyword));
      if (!(verificationResult == null ? void 0 : verificationResult.isList) && containsKeyword) {
        currentProcessedUrlInfo.documentType = "keyword_match_not_verified_list (manual_url_input)";
        flaggedCandidateUrlCount++;
        new import_obsidian.Notice(`Manual URL ${listUrl} looks like a subprocessor list but couldn't be verified. Reason: ${this.scrubHyperlinks(verificationResult == null ? void 0 : verificationResult.reasoning) || "Details unavailable."}`);
        if (this.settings.verboseDebug) console.log(`Flagged Manual URL (keyword match, not verified): ${listUrl}`);
      } else if (verificationResult == null ? void 0 : verificationResult.isList) {
        currentProcessedUrlInfo.documentType = "verified_subprocessor_list (manual_url_input_not_current)";
        new import_obsidian.Notice(`Manual URL ${listUrl} verified as a list, but not current. Reason: ${this.scrubHyperlinks(verificationResult == null ? void 0 : verificationResult.reasoning) || "Details unavailable."}`);
      } else {
        currentProcessedUrlInfo.documentType = "not_a_subprocessor_list (manual_url_input)";
        new import_obsidian.Notice(`Manual URL ${listUrl} could not be verified as a list. Reason: ${this.scrubHyperlinks(verificationResult == null ? void 0 : verificationResult.reasoning) || "Details unavailable."}`);
      }
    }
    currentProcessedUrlInfo.extractedSubprocessorsCount = currentUrlExtractedCount;
    processedUrlDetails.push(currentProcessedUrlInfo);
    return { collectedRelationships, processedUrlDetails, flaggedCandidateUrlCount };
  }
  async fetchDataFromPastedText(processorName, pastedText) {
    if (this.settings.verboseDebug) console.log(`Fetching data from pasted text for ${processorName}`);
    if (!this.settings.rightbrainExtractEntitiesTaskId) {
      new import_obsidian.Notice("RightBrain Task ID for entity extraction is not configured. Please set it in plugin settings.");
      return null;
    }
    const collectedRelationships = [];
    const seenRelationshipsInCurrentSearch = /* @__PURE__ */ new Set();
    const processedUrlDetails = [];
    const rbToken = await this.getRightBrainAccessToken();
    if (!rbToken) {
      new import_obsidian.Notice("Could not obtain RightBrain token for pasted text processing.");
      processedUrlDetails.push({
        url: `text_input_for_${this.sanitizeNameForFilePathAndAlias(processorName).filePathName}`,
        // Placeholder URL for logging
        title: `Pasted Text for ${processorName}`,
        documentType: "manual_text_submission_failed (no_rb_token)"
        // No verification details applicable here as the process couldn't start
      });
      return { collectedRelationships, processedUrlDetails, flaggedCandidateUrlCount: 0 };
    }
    const taskInput = { [this.settings.rightbrainExtractInputField]: pastedText };
    const extractionResult = await this.callRightBrainTask(this.settings.rightbrainExtractEntitiesTaskId, taskInput, rbToken);
    let currentUrlExtractedCount = 0;
    const sourcePlaceholder = `manual_text_input:${processorName}`;
    if (extractionResult && typeof extractionResult.response === "object" && extractionResult.response !== null) {
      const rbResponse = extractionResult.response;
      const thirdParty = rbResponse[this.settings.rightbrainExtractOutputThirdPartyField] || [];
      const own = rbResponse[this.settings.rightbrainExtractOutputOwnEntitiesField] || [];
      thirdParty.forEach((e) => {
        currentUrlExtractedCount += this.addRelationship(collectedRelationships, seenRelationshipsInCurrentSearch, processorName, e, "uses_subprocessor", sourcePlaceholder, "Processed from manually pasted text.");
      });
      own.forEach((e) => {
        currentUrlExtractedCount += this.addRelationship(collectedRelationships, seenRelationshipsInCurrentSearch, processorName, e, "is_own_entity", sourcePlaceholder, "Processed from manually pasted text.");
      });
      processedUrlDetails.push({
        url: sourcePlaceholder,
        title: `Pasted Text for ${processorName}`,
        documentType: "manual_text_submission_processed",
        verificationMethod: "rightbrain_text_task",
        extractedSubprocessorsCount: currentUrlExtractedCount,
        verificationReasoning: `Extracted ${currentUrlExtractedCount} entities from pasted text.`
      });
    } else {
      new import_obsidian.Notice(`Failed to extract entities from pasted text for ${processorName}. Check console.`);
      console.error(`ProcessorProcessor: RB Extract From Text task did not return expected 'response' object or failed. Full task result:`, JSON.stringify(extractionResult).substring(0, 500));
      processedUrlDetails.push({
        url: sourcePlaceholder,
        title: `Pasted Text for ${processorName}`,
        documentType: "manual_text_submission_failed (rb_task_error)",
        verificationMethod: "rightbrain_text_task",
        verificationReasoning: "RightBrain task for text processing failed or returned an unexpected response."
      });
    }
    return { collectedRelationships, processedUrlDetails, flaggedCandidateUrlCount: 0 };
  }
  async ensureFolderExists(folderPath) {
    try {
      const normalizedPath = folderPath.startsWith("/") ? folderPath.substring(1) : folderPath;
      if (normalizedPath === "") return;
      const abstractFolderPath = this.app.vault.getAbstractFileByPath(normalizedPath);
      if (!abstractFolderPath) {
        await this.app.vault.createFolder(normalizedPath);
        if (this.settings.verboseDebug) console.log(`Folder created: ${normalizedPath}`);
      }
    } catch (e) {
      console.error(`Error ensuring folder ${folderPath} exists:`, e);
      new import_obsidian.Notice(`Error creating folder: ${folderPath}`);
    }
  }
  async ensureProcessorFile(originalProcessorName, addFrontmatter = false, isTopLevelProcessor = true) {
    var _a;
    await this.ensureFolderExists(this.settings.processorsFolderPath);
    const { filePathName, originalNameAsAlias } = this.sanitizeNameForFilePathAndAlias(originalProcessorName);
    const folder = this.settings.processorsFolderPath.startsWith("/") ? this.settings.processorsFolderPath.substring(1) : this.settings.processorsFolderPath;
    const filePath = `${folder}/${filePathName}.md`;
    let file = this.app.vault.getAbstractFileByPath(filePath);
    if (!file) {
      try {
        let initialContent = "";
        if (addFrontmatter) {
          const tag = isTopLevelProcessor ? "processor" : "subprocessor";
          const aliasForFrontmatter = originalNameAsAlias.replace(/[:\[\],"]/g, "");
          initialContent = `---
tags: [${tag}]
aliases: ["${aliasForFrontmatter}"]
---

# ${originalNameAsAlias}

`;
        } else {
          initialContent = `# ${originalNameAsAlias}

`;
        }
        file = await this.app.vault.create(filePath, initialContent);
      } catch (e) {
        if ((_a = e.message) == null ? void 0 : _a.toLowerCase().includes("file already exists")) {
          file = this.app.vault.getAbstractFileByPath(filePath);
          if (!file) {
            console.error(`Failed to get file ${filePath} after 'already exists' error.`);
            return null;
          }
        } else {
          console.error(`Error creating processor file ${filePath}:`, e);
          return null;
        }
      }
    }
    if (file && addFrontmatter) {
      const tag = isTopLevelProcessor ? "processor" : "subprocessor";
      const aliasForFrontmatter = originalNameAsAlias.replace(/[:\[\],"]/g, "");
      await this.app.vault.process(file, (content) => {
        let newContent = this.updateFrontmatter(content, { tags: [tag], aliases: [aliasForFrontmatter] }, originalNameAsAlias);
        if (!newContent.trim().includes(`# ${originalNameAsAlias}`)) {
          const bodyStartIndex = newContent.indexOf("\n---") > 0 ? newContent.indexOf("\n---", newContent.indexOf("\n---") + 3) + 4 : 0;
          const body = newContent.substring(bodyStartIndex);
          const frontmatterPart = newContent.substring(0, bodyStartIndex);
          newContent = frontmatterPart + (frontmatterPart.endsWith("\n") ? "" : "\n") + `# ${originalNameAsAlias}

` + body.trimStart();
        }
        return newContent;
      });
    }
    return file;
  }
  async updateProcessorFile(file, originalProcessorName, relationships, isTopLevelProcessor) {
    const subprocessorsHeading = "Subprocessors";
    let tableMd = `| Subprocessor Entity Name | Processing Function | Location |
`;
    tableMd += `|---|---|---|
`;
    const relevantRelationships = relationships.filter((r) => r.RelationshipType === "uses_subprocessor" && r.PrimaryProcessor === originalProcessorName);
    relevantRelationships.forEach((rel) => {
      const { filePathName: subFilePathName, originalNameAsAlias: subOriginalName } = this.sanitizeNameForFilePathAndAlias(rel.SubprocessorName);
      const markdownAlias = subOriginalName.replace(/\n/g, " ").replace(/[\[\]()|]/g, "");
      const processorsFolder = this.settings.processorsFolderPath;
      const markdownLinkTarget = encodeURI(`${processorsFolder}/${subFilePathName}.md`);
      const subprocessorPageLink = `[${markdownAlias}](${markdownLinkTarget})`;
      const processingFunctionDisplay = (rel.ProcessingFunction || "N/A").replace(/\n/g, "<br>").replace(/\|/g, "\\|");
      const locationDisplay = (rel.Location || "N/A").replace(/\n/g, "<br>").replace(/\|/g, "\\|");
      tableMd += `| ${subprocessorPageLink} | ${processingFunctionDisplay} | ${locationDisplay} |
`;
    });
    const analysisLogsHeading = "Analysis Logs";
    const { filePathName: logFilePathNamePart } = this.sanitizeNameForFilePathAndAlias(originalProcessorName);
    const analysisLogsFolder = this.settings.analysisLogsFolderPath;
    const logFileName = `${logFilePathNamePart} Subprocessor Logs.md`;
    const logFileLinkTarget = encodeURI(`${analysisLogsFolder}/${logFileName}`);
    const logFileLink = `[[${analysisLogsFolder}/${logFileName}|${originalProcessorName} Subprocessor Logs]]`;
    const analysisLogSection = `
- ${logFileLink}
`;
    await this.app.vault.process(file, (content) => {
      const tag = isTopLevelProcessor ? "processor" : "subprocessor";
      let newContent = this.updateFrontmatter(content, { tags: [tag], aliases: [originalProcessorName.replace(/[:\[\],"]/g, "")] }, originalProcessorName);
      if (!newContent.trim().includes(`# ${originalProcessorName}`)) {
        const bodyStartIndex = newContent.indexOf("\n---") > 0 ? newContent.indexOf("\n---", newContent.indexOf("\n---") + 3) + 4 : 0;
        const body = newContent.substring(bodyStartIndex);
        const frontmatterPart = newContent.substring(0, bodyStartIndex);
        newContent = frontmatterPart + (frontmatterPart.endsWith("\n") ? "" : "\n") + `# ${originalProcessorName}

` + body.trimStart();
      }
      newContent = this.ensureHeadingAndSection(newContent, subprocessorsHeading, tableMd, null, null);
      newContent = this.ensureHeadingAndSection(newContent, analysisLogsHeading, analysisLogSection, null, null, true);
      return newContent;
    });
  }
  async createOrUpdateSubprocessorFile(originalSubprocessorName, originalPrimaryProcessorNameForContext, newClientRelationships) {
    var _a;
    await this.ensureFolderExists(this.settings.processorsFolderPath);
    const { filePathName: subFilePathName, originalNameAsAlias: subOriginalNameAsAlias } = this.sanitizeNameForFilePathAndAlias(originalSubprocessorName);
    const folder = this.settings.processorsFolderPath.startsWith("/") ? this.settings.processorsFolderPath.substring(1) : this.settings.processorsFolderPath;
    const subFilePath = `${folder}/${subFilePathName}.md`;
    let file = this.app.vault.getAbstractFileByPath(subFilePath);
    if (!file) {
      const aliasForFrontmatter = subOriginalNameAsAlias.replace(/[:\[\],"]/g, "");
      const initialContent = `---
tags: [subprocessor]
aliases: ["${aliasForFrontmatter}"]
---

# ${subOriginalNameAsAlias}

## Used By

`;
      try {
        file = await this.app.vault.create(subFilePath, initialContent);
      } catch (e) {
        if ((_a = e.message) == null ? void 0 : _a.toLowerCase().includes("file already exists")) {
          file = this.app.vault.getAbstractFileByPath(subFilePath);
          if (!file) {
            console.error(`Failed to get subprocessor file ${subFilePath} after 'already exists' error.`);
            return;
          }
        } else {
          console.error(`Error creating subprocessor file ${subFilePath}:`, e);
          return;
        }
      }
    }
    if (!file) return;
    await this.app.vault.process(file, (content) => {
      let newContent = this.updateFrontmatter(content, { tags: ["subprocessor"], aliases: [subOriginalNameAsAlias.replace(/[:\[\],"]/g, "")] }, subOriginalNameAsAlias);
      if (!newContent.trim().includes(`# ${subOriginalNameAsAlias}`)) {
        const bodyStartIndex = newContent.indexOf("\n---") > 0 ? newContent.indexOf("\n---", newContent.indexOf("\n---") + 3) + 4 : 0;
        const body = newContent.substring(bodyStartIndex);
        const frontmatterPart = newContent.substring(0, bodyStartIndex);
        newContent = frontmatterPart + (frontmatterPart.endsWith("\n") ? "" : "\n") + `# ${subOriginalNameAsAlias}

` + body.trimStart();
      }
      const usedByHeading = "Used By";
      const existingRows = this.extractClientTableRows(content);
      const allRows = new Set(existingRows);
      newClientRelationships.forEach((rel) => {
        const { originalNameAsAlias: primaryOriginalName } = this.sanitizeNameForFilePathAndAlias(rel.PrimaryProcessor);
        const primaryProcessorPlainText = primaryOriginalName.replace(/\|/g, "\\|");
        const processingFunctionDisplay = (rel.ProcessingFunction || "N/A").replace(/\n/g, "<br>").replace(/\|/g, "\\|");
        const locationDisplay = (rel.Location || "N/A").replace(/\n/g, "<br>").replace(/\|/g, "\\|");
        const sourceUrlLink = rel.SourceURL.startsWith("http") ? `[Source](${rel.SourceURL})` : rel.SourceURL;
        const rowContent = ` ${primaryProcessorPlainText} | ${processingFunctionDisplay} | ${locationDisplay} | ${sourceUrlLink} `;
        allRows.add(rowContent);
      });
      let clientTableMd = `| Primary Processor | Processing Function | Location | Source URL |
`;
      clientTableMd += `|---|---|---|---|
`;
      allRows.forEach((row) => {
        clientTableMd += `|${row}|
`;
      });
      newContent = this.ensureHeadingAndSection(newContent, usedByHeading, clientTableMd, null, null);
      return newContent;
    });
  }
  updateFrontmatter(content, updates, pageNameForAlias) {
    let fm = {};
    const fmRegex = /^---\s*\n([\s\S]*?)\n---\s*\n/;
    const match = content.match(fmRegex);
    let body = content;
    if (match && match[1]) {
      try {
        const yamlLines = match[1].split("\n");
        yamlLines.forEach((line) => {
          const parts = line.split(":");
          if (parts.length >= 2) {
            const key = parts[0].trim();
            const value = parts.slice(1).join(":").trim();
            if (key === "tags" || key === "aliases") {
              if (value.startsWith("[") && value.endsWith("]")) {
                fm[key] = value.substring(1, value.length - 1).split(",").map((s) => s.trim().replace(/^["']|["']$/g, ""));
              } else {
                fm[key] = [value.replace(/^["']|["']$/g, "")];
              }
            } else {
              fm[key] = value.replace(/^["']|["']$/g, "");
            }
          }
        });
      } catch (e) {
        console.warn("ProcessorProcessor: Could not parse existing frontmatter, will overwrite relevant keys.", e);
        fm = {};
      }
      body = content.substring(match[0].length);
    }
    if (updates.tags) {
      const currentTags = new Set(Array.isArray(fm.tags) ? fm.tags.map((t) => String(t).toLowerCase()) : []);
      updates.tags.forEach((tag) => currentTags.add(String(tag).toLowerCase()));
      fm.tags = Array.from(currentTags);
    }
    if (updates.aliases) {
      const currentAliases = new Set(Array.isArray(fm.aliases) ? fm.aliases.map((a) => String(a)) : []);
      updates.aliases.forEach((alias) => {
        const sanitizedAlias = String(alias).replace(/[:\[\],"]/g, "");
        if (sanitizedAlias) currentAliases.add(sanitizedAlias);
      });
      const sanitizedPageNameAlias = String(pageNameForAlias).replace(/[:\[\],"]/g, "");
      if (sanitizedPageNameAlias) currentAliases.add(sanitizedPageNameAlias);
      fm.aliases = Array.from(currentAliases);
    }
    let fmString = "---\n";
    for (const key in fm) {
      if (fm.hasOwnProperty(key)) {
        if (Array.isArray(fm[key])) {
          if (fm[key].length > 0) {
            fmString += `${key}: [${fm[key].map((item) => `"${item}"`).join(", ")}]
`;
          }
        } else {
          fmString += `${key}: "${fm[key]}"
`;
        }
      }
    }
    fmString += "---\n";
    if (fmString === "---\n---\n" && !match) {
      return body;
    }
    return fmString + body;
  }
  async updateAnalysisLogPage(processorName, processedUrls, relationships, mergeDecisions) {
    await this.ensureFolderExists(this.settings.analysisLogsFolderPath);
    const { filePathName: sanitizedProcessorNameForLogFile } = this.sanitizeNameForFilePathAndAlias(processorName);
    const logsFolder = this.settings.analysisLogsFolderPath;
    const logFileName = `${sanitizedProcessorNameForLogFile} Subprocessor Logs.md`;
    const logFilePath = `${logsFolder}/${logFileName}`;
    const logEntryContent = this.formatResultsForObsidianLog(processorName, relationships, processedUrls, mergeDecisions);
    await this.writeResultsToObsidianNote(logFilePath, logEntryContent, "ensure_exists_and_append", processorName);
  }
  ensureHeadingAndSection(content, headingText, sectionNewContent, startMarker = null, endMarker = null, appendUnderHeadingIfNoMarkers = false) {
    const headingRegex = new RegExp(`^(#+)\\s*${headingText.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")}(\\s*\\n|$)`, "im");
    const headingMatch = content.match(headingRegex);
    const sectionWithHeading = `
## ${headingText}
${sectionNewContent.trim()}
`;
    if (startMarker && endMarker) {
      const startIdx = content.indexOf(startMarker);
      const endIdx = content.indexOf(endMarker);
      if (startIdx !== -1 && endIdx !== -1 && startIdx < endIdx) {
        return content.substring(0, startIdx + startMarker.length) + `
${sectionNewContent.trim()}
` + // Ensure new content is on new lines
        content.substring(endIdx);
      }
    }
    if (headingMatch) {
      const headingLevel = headingMatch[1].length;
      const nextHeadingRegex = new RegExp(`^#{1,${headingLevel}}\\s+.*(\\s*\\n|$)`, "im");
      let startIndexAfterHeading = headingMatch.index + headingMatch[0].length;
      let contentAfterHeading = content.substring(startIndexAfterHeading);
      let endIndex = content.length;
      const nextMatch = contentAfterHeading.match(nextHeadingRegex);
      if (nextMatch) {
        endIndex = startIndexAfterHeading + nextMatch.index;
      }
      if (appendUnderHeadingIfNoMarkers) {
        return content.substring(0, endIndex) + // Content up to where next section would start (or end of doc)
        `
${sectionNewContent.trim()}
` + // Append new stuff
        content.substring(endIndex);
      } else {
        return content.substring(0, startIndexAfterHeading) + `${sectionNewContent.trim()}
` + content.substring(endIndex);
      }
    } else {
      return content.trimEnd() + "\n\n" + sectionWithHeading.trimStart();
    }
  }
  formatResultsForObsidianLog(processorName, relationships, processedUrls, mergeDecisions = []) {
    let logContent = `
---
### Log Entry: ${(/* @__PURE__ */ new Date()).toISOString()} for ${processorName}

`;
    if (mergeDecisions.length > 0) {
      logContent += `#### Proactive Deduplication Decisions (${mergeDecisions.length}):
`;
      mergeDecisions.forEach((decision) => {
        logContent += `- ${decision}
`;
      });
      logContent += "\n";
    }
    logContent += `#### Processed URLs (${processedUrls.length}):
`;
    if (processedUrls.length === 0) {
      logContent += "- No URLs were processed.\n";
    } else {
      logContent += "| URL | Title | Type | Verified List? | Current? | Extracted # | Reasoning |\n";
      logContent += "|---|---|---|---|---|---|---|\n";
      processedUrls.forEach((url) => {
        const titleDisplay = this.scrubHyperlinks(url.title || "N/A").substring(0, 70);
        const urlLink = url.url.startsWith("http") ? `[Link](${url.url})` : url.url;
        const reasoningDisplay = this.scrubHyperlinks(url.verificationReasoning || "N/A").substring(0, 100);
        logContent += `| ${urlLink} | ${titleDisplay}... | ${url.documentType || "N/A"} | ${url.isList ? "Yes" : "No"} | ${url.isCurrent ? "Yes" : "No"} | ${url.extractedSubprocessorsCount || 0} | ${reasoningDisplay}... |
`;
      });
    }
    logContent += "\n";
    logContent += `#### Extracted Relationships (${relationships.length}):
`;
    if (relationships.length === 0) {
      logContent += "- No new relationships were extracted in this run.\n";
    } else {
      logContent += "| Primary Processor | Target Entity | Type | Function | Location | Source URL |\n";
      logContent += "|---|---|---|---|---|---|\n";
      relationships.forEach((rel) => {
        const targetEntityDisplay = this.scrubHyperlinks(rel.SubprocessorName).substring(0, 50);
        const primaryProcDisplay = this.scrubHyperlinks(rel.PrimaryProcessor).substring(0, 50);
        const funcDisplay = this.scrubHyperlinks(rel.ProcessingFunction).substring(0, 70);
        const locDisplay = this.scrubHyperlinks(rel.Location).substring(0, 50);
        const sourceUrlLink = rel.SourceURL.startsWith("http") ? `[Source](${rel.SourceURL})` : rel.SourceURL;
        logContent += `| ${primaryProcDisplay} | ${targetEntityDisplay} | ${rel.RelationshipType} | ${funcDisplay}... | ${locDisplay}... | ${sourceUrlLink} |
`;
      });
    }
    logContent += "\n";
    return logContent;
  }
  async writeResultsToObsidianNote(filePath, contentToAppendOrInitial, mode = "ensure_exists_and_append", processorNameForLogTitle) {
    var _a;
    let file = this.app.vault.getAbstractFileByPath(filePath);
    if (!file && (mode === "ensure_exists_and_append" || mode === "overwrite")) {
      let initialContent = "";
      if (processorNameForLogTitle) {
        initialContent += `# Analysis Log: ${processorNameForLogTitle}

`;
      }
      initialContent += contentToAppendOrInitial;
      try {
        file = await this.app.vault.create(filePath, initialContent);
        if (this.settings.verboseDebug) console.log(`Log file created: ${filePath}`);
      } catch (e) {
        if ((_a = e.message) == null ? void 0 : _a.toLowerCase().includes("file already exists")) {
          file = this.app.vault.getAbstractFileByPath(filePath);
          if (!file) {
            console.error(`Failed to get log file ${filePath} after 'already exists' error.`);
            return;
          }
        } else {
          console.error(`Error creating log file ${filePath}:`, e);
          new import_obsidian.Notice(`Error creating log file: ${filePath}`);
          return;
        }
      }
      if (file && mode === "ensure_exists_and_append") {
        return;
      }
    }
    if (file) {
      if (mode === "overwrite") {
        let newContent = "";
        if (processorNameForLogTitle) {
          newContent += `# Analysis Log: ${processorNameForLogTitle}

`;
        }
        newContent += contentToAppendOrInitial;
        await this.app.vault.modify(file, newContent);
        if (this.settings.verboseDebug) console.log(`Log file overwritten: ${filePath}`);
      } else if (mode === "append" || mode === "ensure_exists_and_append" && file) {
        await this.app.vault.append(file, contentToAppendOrInitial);
        if (this.settings.verboseDebug) console.log(`Content appended to log file: ${filePath}`);
      }
    } else if (mode === "append") {
      new import_obsidian.Notice(`Log file ${filePath} not found. Cannot append.`);
      if (this.settings.verboseDebug) console.log(`Log file not found for append: ${filePath}`);
    }
  }
  async getRightBrainAccessToken(creds) {
    const clientId = (creds == null ? void 0 : creds.clientId) || this.settings.rightbrainClientId;
    const clientSecret = (creds == null ? void 0 : creds.clientSecret) || this.settings.rightbrainClientSecret;
    const oauthUrl = (creds == null ? void 0 : creds.oauthUrl) || this.settings.rightbrainOauth2Url;
    if (!clientId || !clientSecret) {
      new import_obsidian.Notice("RightBrain Client ID or Secret not configured.");
      return null;
    }
    if (this._rbToken && this._rbTokenExpiry > Date.now()) {
      if (this.settings.verboseDebug) console.log("Using cached RightBrain token.");
      return this._rbToken;
    }
    const tokenUrl = `${oauthUrl}/oauth2/token`;
    const bodyParams = new URLSearchParams();
    bodyParams.append("grant_type", "client_credentials");
    const credentials = `${clientId}:${clientSecret}`;
    const encodedCredentials = btoa(credentials);
    const headers = {
      "Authorization": `Basic ${encodedCredentials}`,
      "Content-Type": "application/x-www-form-urlencoded",
      "User-Agent": `ObsidianProcessorProcessorPlugin/${this.manifest.version}`
    };
    try {
      if (this.settings.verboseDebug) console.log("Requesting new RightBrain token.");
      const response = await (0, import_obsidian.requestUrl)({
        url: tokenUrl,
        method: "POST",
        headers,
        body: bodyParams.toString(),
        throw: false
      });
      if (response.status === 200 && response.json && response.json.access_token) {
        if (this.settings.verboseDebug) console.log("Successfully obtained new RightBrain token.");
        this._rbToken = response.json.access_token;
        this._rbTokenExpiry = Date.now() + (response.json.expires_in || 3600) * 1e3 - 6e5;
        return response.json.access_token;
      } else {
        console.error("ProcessorProcessor: Failed to get RightBrain token.", response.status, response.text);
        new import_obsidian.Notice(`Failed to get RightBrain token: ${response.status}.`);
        this._rbToken = null;
        this._rbTokenExpiry = 0;
        return null;
      }
    } catch (error) {
      console.error("ProcessorProcessor: Network error fetching RightBrain token:", error);
      new import_obsidian.Notice("Network error fetching RightBrain token.");
      this._rbToken = null;
      this._rbTokenExpiry = 0;
      return null;
    }
  }
  generateSearchQueries(processorName) {
    const cleanedName = processorName.replace(/\b(?:inc\.?|llc\.?|ltd\.?|corp\.?|gmbh\.?|incorporated|limited|corporation)\b/gi, "").replace(/[,.]/g, "").trim();
    return [
      `"${cleanedName}" sub-processor list`,
      `"${cleanedName}" subprocessors`,
      `"${cleanedName}" data processing addendum exhibit`,
      `"${cleanedName}" DPA subprocessors`,
      `"${cleanedName}" third-party vendors`,
      `"${cleanedName}" service providers list`,
      // More generic but sometimes useful for finding portals
      `"${cleanedName}" trust center subprocessors`,
      `"${cleanedName}" legal subprocessors`
      // If the name is short, broad searches might be too noisy.
      // Consider adding quotes around cleanedName if it contains spaces.
    ];
  }
  async searchSerpApiForDpas(processorName, queries, maxResultsSetting) {
    var _a, _b, _c;
    if (!this.settings.serpApiKey) {
      new import_obsidian.Notice("SerpAPI key not set. Cannot perform SerpAPI search.");
      return [];
    }
    const allResults = [];
    const processedUrls = /* @__PURE__ */ new Set();
    const queriesToRun = queries.slice(0, Math.min(queries.length, 3));
    new import_obsidian.Notice(`Searching SerpAPI for ${processorName} using ${queriesToRun.length} queries...`, 3e3);
    for (const query of queriesToRun) {
      if (allResults.length >= maxResultsSetting && maxResultsSetting > 0) {
        break;
      }
      const params = new URLSearchParams({
        api_key: this.settings.serpApiKey,
        q: query,
        engine: "google",
        // Or other engines like 'bing'
        num: "10"
        // Number of results per query (max 100 for Google, usually 10-20 is fine)
        // You can add other params like 'location', 'gl' (country), 'hl' (language) if needed
      });
      const serpApiUrl = `https://serpapi.com/search?${params.toString()}`;
      try {
        const response = await (0, import_obsidian.requestUrl)({ url: serpApiUrl, method: "GET", throw: false });
        if (response.status === 200 && response.json && response.json.organic_results) {
          const organicResults = response.json.organic_results;
          for (const result of organicResults) {
            if (result.link && !processedUrls.has(result.link)) {
              const urlLower = result.link.toLowerCase();
              const titleLower = ((_a = result.title) == null ? void 0 : _a.toLowerCase()) || "";
              const snippetLower = ((_b = result.snippet) == null ? void 0 : _b.toLowerCase()) || "";
              const isRelevant = SUBPROCESSOR_URL_KEYWORDS.some(
                (keyword) => urlLower.includes(keyword) || titleLower.includes(keyword) || snippetLower.includes(keyword)
              );
              if (isRelevant) {
                allResults.push({
                  processorName,
                  title: result.title || "No Title",
                  url: result.link,
                  snippet: result.snippet || "No Snippet",
                  searchQuery: query,
                  documentType: "serpapi_dpa_or_subprocessor_list_candidate"
                  // Mark as potential candidate
                });
                processedUrls.add(result.link);
                if (allResults.length >= maxResultsSetting && maxResultsSetting > 0) break;
              }
            }
          }
        } else {
          console.error(`SerpAPI error for query "${query}": ${response.status}`, (_c = response.text) == null ? void 0 : _c.substring(0, 200));
          new import_obsidian.Notice(`SerpAPI query failed for "${query.substring(0, 20)}...". Status: ${response.status}`);
        }
      } catch (error) {
        console.error(`Network error during SerpAPI search for query "${query}":`, error);
        new import_obsidian.Notice(`Network error during SerpAPI search for "${query.substring(0, 20)}...".`);
      }
      await new Promise((resolve) => setTimeout(resolve, 500 + Math.random() * 300));
    }
    if (this.settings.verboseDebug) console.log(`SerpAPI search for ${processorName} found ${allResults.length} relevant candidates.`);
    return allResults;
  }
  getCompanyDomain(processorName) {
    let name = processorName.toLowerCase();
    name = name.replace(/\b(?:inc\.?|llc\.?|ltd\.?|corp\.?|gmbh\.?)\b/g, "").trim();
    name = name.replace(/[,.]/g, "");
    try {
      if (name.includes(".") && !name.includes(" ")) {
        const url = new URL(name.startsWith("http") ? name : `http://${name}`);
        return url.hostname.replace(/^www\./, "");
      }
    } catch (e) {
    }
    const parts = name.split(/\s+/);
    if (parts.length > 1) {
      return "";
    }
    return name;
  }
  isValidUrl(url, processorNameContext = "") {
    if (!url || typeof url !== "string") return false;
    try {
      const parsedUrl = new URL(url);
      if (!["http:", "https:"].includes(parsedUrl.protocol)) {
        return false;
      }
      if (processorNameContext) {
        const processorDomain = this.getCompanyDomain(processorNameContext);
        if (processorDomain && !parsedUrl.hostname.toLowerCase().includes(processorDomain.replace(/^www\./, ""))) {
        }
      }
      return true;
    } catch (e) {
      return false;
    }
  }
  async extractUrlsFromDpaPage(pageUrl, processorNameContext, sourcePageTitle) {
    var _a;
    if (!this.settings.rightbrainVerifyUrlTaskId) {
      return [];
    }
    const rbToken = await this.getRightBrainAccessToken();
    if (!rbToken) return [];
    const extractedLinks = [];
    let pageContent = "";
    try {
      const response = await (0, import_obsidian.requestUrl)({ url: pageUrl, method: "GET", throw: false });
      if (response.status === 200) {
        pageContent = response.text;
      } else {
        return [];
      }
    } catch (e) {
      return [];
    }
    if (!pageContent) return [];
    const linkRegex = /<a\s+(?:[^>]*?\s+)?href="([^"]*)"/gi;
    let match;
    while ((match = linkRegex.exec(pageContent)) !== null) {
      let href = match[1].trim();
      if (href && !href.startsWith("#") && !href.startsWith("mailto:") && !href.startsWith("javascript:")) {
        try {
          const absoluteUrl = new URL(href, pageUrl).toString();
          if (this.isValidUrl(absoluteUrl, processorNameContext)) {
            const urlLower = absoluteUrl.toLowerCase();
            const titleOrTextLower = (((_a = match[0].match(/>(.*?)</)) == null ? void 0 : _a[1]) || "").toLowerCase();
            const isPotentialSubprocessorList = SUBPROCESSOR_URL_KEYWORDS.some(
              (keyword) => urlLower.includes(keyword) || titleOrTextLower.includes(keyword)
            );
            if (isPotentialSubprocessorList) {
              extractedLinks.push({
                processorName: processorNameContext,
                title: `Linked from: ${sourcePageTitle || pageUrl}`,
                url: absoluteUrl,
                snippet: `Found on page: ${pageUrl}`,
                documentType: "linked_subprocessor_list_candidate",
                sourceDpaUrl: pageUrl
              });
            }
          }
        } catch (e) {
        }
      }
    }
    return extractedLinks;
  }
  async callRightBrainTask(taskId, taskVariables, rbToken) {
    if (!taskId) {
      new import_obsidian.Notice("RightBrain Task ID is missing for the call.");
      console.error("ProcessorProcessor: Attempted to call RightBrain task with no Task ID.");
      return null;
    }
    if (!this.settings.rightbrainOrgId || !this.settings.rightbrainProjectId) {
      new import_obsidian.Notice("RightBrain Org ID or Project ID not set. Cannot call task.");
      console.error("ProcessorProcessor: RB OrgID or ProjectID missing for task call.");
      return null;
    }
    const taskRunUrl = `${this.settings.rightbrainApiUrl}/org/${this.settings.rightbrainOrgId}/project/${this.settings.rightbrainProjectId}/task/${taskId}/run`;
    const headers = {
      "Authorization": `Bearer ${rbToken}`,
      "Content-Type": "application/json",
      "User-Agent": `ObsidianProcessorProcessorPlugin/${this.manifest.version}`
    };
    const payload = {
      task_input: taskVariables
    };
    try {
      const response = await (0, import_obsidian.requestUrl)({
        url: taskRunUrl,
        method: "POST",
        headers,
        body: JSON.stringify(payload),
        // Send the newly constructed payload
        throw: false
      });
      if (response.json && (response.status === 200 || response.status === 201)) {
        return response.json;
      } else {
        new import_obsidian.Notice(`RightBrain Task ${taskId.substring(0, 8)}... failed: ${response.status}. Check console.`, 7e3);
        console.error(`RB Task Call [${taskId}] Error: ${response.status}`, response.text ? response.text.substring(0, 1e3) : "No body", "Payload Sent:", payload);
        return null;
      }
    } catch (error) {
      new import_obsidian.Notice(`Network error calling RightBrain Task ${taskId.substring(0, 8)}.... Check console.`, 7e3);
      console.error(`RB Task Call [${taskId}] Network Error:`, error, "Payload Sent:", payload);
      return null;
    }
  }
  async verifySubprocessorListUrl(urlToVerify, processorName, rbToken) {
    if (!this.settings.rightbrainVerifyUrlTaskId) {
      new import_obsidian.Notice("RightBrain Verify URL Task ID is not configured. Cannot verify URL.");
      return null;
    }
    const taskInput = {
      "url_content": urlToVerify,
      "expected_processor_name": processorName
    };
    if (this.settings.verboseDebug) console.log(`Verifying URL ${urlToVerify} with RB Task ${this.settings.rightbrainVerifyUrlTaskId}. Input:`, JSON.stringify(taskInput));
    const taskResult = await this.callRightBrainTask(this.settings.rightbrainVerifyUrlTaskId, taskInput, rbToken);
    if (this.settings.verboseDebug) {
      console.log(`RB Verify Task [${this.settings.rightbrainVerifyUrlTaskId}] Full Result for URL ${urlToVerify}:`, JSON.stringify(taskResult, null, 2));
    }
    if (taskResult && typeof taskResult.response === "object" && taskResult.response !== null) {
      const rbResponse = taskResult.response;
      const isList = String(rbResponse.isSubprocessorList).toLowerCase() === "true";
      const isCorrectProcessor = String(rbResponse.isCorrectProcessor).toLowerCase() === "true";
      const isCurrent = String(rbResponse.isCurrentVersion).toLowerCase() === "true";
      const reasoning = rbResponse.reasoning || "N/A";
      let pageContent = void 0;
      if (taskResult.run_data && taskResult.run_data.submitted && typeof taskResult.run_data.submitted.url_content === "string" && taskResult.run_data.submitted.url_content.toLowerCase().includes("<html")) {
        pageContent = taskResult.run_data.submitted.url_content;
        if (this.settings.verboseDebug) console.log("Retrieved pageContent from run_data.submitted.url_content for verify task");
      } else if (typeof rbResponse.fetched_page_html === "string") {
        pageContent = rbResponse.fetched_page_html;
        if (this.settings.verboseDebug) console.log("Retrieved pageContent from rbResponse.fetched_page_html for verify task");
      } else if (typeof rbResponse.page_content === "string") {
        pageContent = rbResponse.page_content;
        if (this.settings.verboseDebug) console.log("Retrieved pageContent from rbResponse.page_content (fallback) for verify task");
      }
      if (this.settings.verboseDebug) {
        console.log(`RB Verify for ${urlToVerify}: List=${isList}, Current=${isCurrent}, Content available: ${!!pageContent}, Content snippet: ${pageContent ? pageContent.substring(0, 100) + "..." : "N/A"}`);
      }
      return { isList, isCurrent: isList && isCurrent, isCorrectProcessor, reasoning, pageContent };
    }
    if (this.settings.verboseDebug) {
      console.warn(`RB Verify task for ${urlToVerify} failed or returned unexpected response format. TaskResult:`, taskResult);
    }
    return null;
  }
  async extractEntitiesFromPageContent(pageContent, rbToken) {
    if (!this.settings.rightbrainExtractEntitiesTaskId) {
      new import_obsidian.Notice("RB Extract Entities Task ID missing. Cannot extract from content.");
      return null;
    }
    if (!pageContent.trim()) {
      return { thirdPartySubprocessors: [], ownEntities: [] };
    }
    const taskInput = { [this.settings.rightbrainExtractInputField]: pageContent };
    const taskResult = await this.callRightBrainTask(this.settings.rightbrainExtractEntitiesTaskId, taskInput, rbToken);
    if (taskResult && typeof taskResult.response === "object" && taskResult.response !== null) {
      const rbResponse = taskResult.response;
      const thirdPartySubprocessors = rbResponse[this.settings.rightbrainExtractOutputThirdPartyField] || [];
      const ownEntities = rbResponse[this.settings.rightbrainExtractOutputOwnEntitiesField] || [];
      return {
        thirdPartySubprocessors: Array.isArray(thirdPartySubprocessors) ? thirdPartySubprocessors : [],
        ownEntities: Array.isArray(ownEntities) ? ownEntities : []
      };
    }
    return null;
  }
  async updateDiscoveryStatus(file, status) {
    if (!file) return;
    await this.app.vault.process(file, (content) => {
      const updates = {
        "discovery-status": status
      };
      if (status === "complete") {
        updates["last-discovered"] = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
      }
      return this.updateFrontmatter(content, updates, file.basename);
    });
  }
  async buildAliasMap() {
    var _a;
    const aliasMap = /* @__PURE__ */ new Map();
    const processorsFolder = this.app.vault.getAbstractFileByPath(this.settings.processorsFolderPath);
    if (!(processorsFolder == null ? void 0 : processorsFolder.children)) return aliasMap;
    for (const file of processorsFolder.children) {
      if (file instanceof import_obsidian.TFile && file.extension === "md") {
        const cache = this.app.metadataCache.getFileCache(file);
        const frontmatter = (cache == null ? void 0 : cache.frontmatter) || {};
        const canonicalName = ((_a = frontmatter.aliases) == null ? void 0 : _a[0]) || file.basename;
        const aliases = (frontmatter.aliases || []).map((a) => String(a).toLowerCase());
        aliases.push(file.basename.toLowerCase());
        for (const alias of new Set(aliases)) {
          if (alias) {
            aliasMap.set(alias, { path: file.path, canonicalName });
          }
        }
      }
    }
    return aliasMap;
  }
  async runDeduplicationForFolder(folder) {
    new import_obsidian.Notice(`Preparing to deduplicate pages in ${folder.path}...`);
    if (!this.settings.rightbrainDeduplicateSubprocessorsTaskId) {
      new import_obsidian.Notice("Deduplication Task ID not set. Cannot proceed.");
      return;
    }
    const rbToken = await this.getRightBrainAccessToken();
    if (!rbToken) {
      new import_obsidian.Notice("Could not get RightBrain token for deduplication.");
      return;
    }
    const files = folder.children.filter((f) => f instanceof import_obsidian.TFile && f.extension === "md");
    if (files.length < 2) {
      new import_obsidian.Notice("Not enough Markdown files in the folder to perform deduplication.");
      return;
    }
    const subprocessorPagesInfo = [];
    for (const file of files) {
      const fileCache = this.app.metadataCache.getFileCache(file);
      const frontmatter = fileCache == null ? void 0 : fileCache.frontmatter;
      const aliases = (frontmatter == null ? void 0 : frontmatter.aliases) && Array.isArray(frontmatter.aliases) ? frontmatter.aliases.map(String) : [];
      if (frontmatter == null ? void 0 : frontmatter.company_name) aliases.push(String(frontmatter.company_name));
      aliases.push(file.basename);
      subprocessorPagesInfo.push({
        file_path: file.path,
        page_name: file.basename,
        // Or a more canonical name from frontmatter if available
        aliases: Array.from(new Set(aliases.filter((a) => a)))
        // Unique, non-empty aliases
      });
    }
    if (subprocessorPagesInfo.length < 2) {
      new import_obsidian.Notice("Not enough processable pages with aliases found for deduplication.");
      return;
    }
    const taskInputPayload = {
      subprocessor_pages: subprocessorPagesInfo
      // Optional: Add a threshold or other parameters if your RB task supports them
      // "similarity_threshold": 0.8 
    };
    new import_obsidian.Notice(`Sending ${subprocessorPagesInfo.length} pages to RightBrain for deduplication analysis... This may take a while.`);
    const taskResult = await this.callRightBrainTask(this.settings.rightbrainDeduplicateSubprocessorsTaskId, taskInputPayload, rbToken);
    if (taskResult && taskResult.response && Array.isArray(taskResult.response.deduplication_results)) {
      const deduplicationResults = taskResult.response.deduplication_results;
      if (deduplicationResults.length === 0) {
        new import_obsidian.Notice("No duplicates found by RightBrain task.");
        return;
      }
      new import_obsidian.Notice(`Deduplication analysis complete. Found ${deduplicationResults.length} potential duplicate sets. Processing merges...`);
      await this.processDeduplicationResults(deduplicationResults);
    } else {
      new import_obsidian.Notice("Deduplication task failed or returned an unexpected response. Check console.");
      console.error("Deduplication task error. Response:", taskResult);
    }
  }
  async processDeduplicationResults(results) {
    var _a, _b, _c;
    let mergeCount = 0;
    for (const resultSet of results) {
      if (!resultSet.survivor_file_path || resultSet.duplicate_file_paths.length === 0) {
        if (this.settings.verboseDebug) console.warn("Skipping invalid deduplication result set:", resultSet);
        continue;
      }
      const survivorFile = this.app.vault.getAbstractFileByPath(resultSet.survivor_file_path);
      if (!survivorFile) {
        if (this.settings.verboseDebug) console.warn(`Survivor file not found: ${resultSet.survivor_file_path}`);
        continue;
      }
      const originalSurvivorContent = await this.app.vault.read(survivorFile);
      const survivorCache = this.app.metadataCache.getFileCache(survivorFile);
      const allAliases = new Set((((_a = survivorCache == null ? void 0 : survivorCache.frontmatter) == null ? void 0 : _a.aliases) || []).map(String));
      allAliases.add(survivorFile.basename);
      const allRows = new Set(this.extractClientTableRows(originalSurvivorContent));
      for (const dupFilePath of resultSet.duplicate_file_paths) {
        if (dupFilePath === survivorFile.path) continue;
        const dupFile = this.app.vault.getAbstractFileByPath(dupFilePath);
        if (dupFile) {
          const dupContent = await this.app.vault.read(dupFile);
          const dupCache = this.app.metadataCache.getFileCache(dupFile);
          (((_b = dupCache == null ? void 0 : dupCache.frontmatter) == null ? void 0 : _b.aliases) || []).map(String).forEach((alias) => allAliases.add(alias));
          allAliases.add(dupFile.basename);
          this.extractClientTableRows(dupContent).forEach((row) => allRows.add(row));
          try {
            await this.app.vault.delete(dupFile);
          } catch (e) {
            console.error(`Failed to delete duplicate file ${dupFilePath}:`, e);
          }
        }
      }
      const fmRegex = /^---\s*\n([\s\S]*?)\n---\s*\n/;
      const match = originalSurvivorContent.match(fmRegex);
      let survivorBody = match ? originalSurvivorContent.substring(match[0].length) : originalSurvivorContent;
      const existingTags = new Set((((_c = survivorCache == null ? void 0 : survivorCache.frontmatter) == null ? void 0 : _c.tags) || []).map(String));
      let newFmString = "---\n";
      newFmString += `aliases: [${Array.from(allAliases).map((a) => `"${a.replace(/"/g, '\\"')}"`).join(", ")}]
`;
      if (existingTags.size > 0) {
        newFmString += `tags: [${Array.from(existingTags).map((t) => `"${t}"`).join(", ")}]
`;
      }
      newFmString += "---\n";
      let clientTableMd = "";
      if (allRows.size > 0) {
        clientTableMd += `| Primary Processor | Processing Function | Location | Source URL |
`;
        clientTableMd += `|---|---|---|---|
`;
        allRows.forEach((row) => {
          clientTableMd += `|${row}|
`;
        });
      }
      const finalBody = this.ensureHeadingAndSection(survivorBody, "Used By", clientTableMd, null, null);
      const finalContent = newFmString + finalBody;
      await this.app.vault.modify(survivorFile, finalContent);
      mergeCount++;
      new import_obsidian.Notice(`Merged ${resultSet.duplicate_file_paths.length} duplicate(s) into ${survivorFile.basename}.`);
    }
    if (mergeCount > 0) {
      new import_obsidian.Notice(`Deduplication finished. ${mergeCount} merge operations performed.`);
    } else {
      new import_obsidian.Notice("Deduplication process finished, but no actionable merges were made.");
    }
  }
  async processManualMerge(survivorFile, duplicateFiles) {
    var _a, _b, _c;
    if (!survivorFile || duplicateFiles.length === 0) {
      new import_obsidian.Notice("Merge cancelled: No survivor or duplicates selected.");
      return;
    }
    new import_obsidian.Notice(`Merging ${duplicateFiles.length} file(s) into ${survivorFile.basename}...`, 6e3);
    try {
      const originalSurvivorContent = await this.app.vault.read(survivorFile);
      const survivorCache = this.app.metadataCache.getFileCache(survivorFile);
      const allAliases = new Set((((_a = survivorCache == null ? void 0 : survivorCache.frontmatter) == null ? void 0 : _a.aliases) || []).map(String));
      allAliases.add(survivorFile.basename);
      const allRows = new Set(this.extractClientTableRows(originalSurvivorContent));
      for (const dupFile of duplicateFiles) {
        const dupContent = await this.app.vault.read(dupFile);
        const dupCache = this.app.metadataCache.getFileCache(dupFile);
        (((_b = dupCache == null ? void 0 : dupCache.frontmatter) == null ? void 0 : _b.aliases) || []).map(String).forEach((alias) => allAliases.add(alias));
        allAliases.add(dupFile.basename);
        this.extractClientTableRows(dupContent).forEach((row) => allRows.add(row));
      }
      const fmRegex = /^---\s*\n([\s\S]*?)\n---\s*\n/;
      const match = originalSurvivorContent.match(fmRegex);
      let survivorBody = match ? originalSurvivorContent.substring(match[0].length) : originalSurvivorContent;
      const existingTags = new Set((((_c = survivorCache == null ? void 0 : survivorCache.frontmatter) == null ? void 0 : _c.tags) || []).map(String));
      let newFmString = "---\n";
      newFmString += `aliases: [${Array.from(allAliases).map((a) => `"${a.replace(/"/g, '\\"')}"`).join(", ")}]
`;
      if (existingTags.size > 0) {
        newFmString += `tags: [${Array.from(existingTags).map((t) => `"${t}"`).join(", ")}]
`;
      }
      newFmString += "---\n";
      let clientTableMd = "";
      if (allRows.size > 0) {
        clientTableMd += `| Primary Processor | Processing Function | Location | Source URL |
`;
        clientTableMd += `|---|---|---|---|
`;
        allRows.forEach((row) => {
          clientTableMd += `|${row}|
`;
        });
      }
      const finalBody = this.ensureHeadingAndSection(survivorBody, "Used By", clientTableMd, null, null);
      const finalContent = newFmString + finalBody;
      await this.app.vault.modify(survivorFile, finalContent);
      for (const dupFile of duplicateFiles) {
        await this.app.vault.delete(dupFile);
      }
      new import_obsidian.Notice(`Successfully merged ${duplicateFiles.length} file(s) into ${survivorFile.basename}.`);
    } catch (error) {
      console.error("Error during manual merge:", error);
      new import_obsidian.Notice("An error occurred during the merge. Check the developer console.");
    }
  }
  extractClientTableRows(content) {
    const rows = [];
    const lines = content.split("\n");
    let inUsedBySection = false;
    let tableHasStarted = false;
    for (const line of lines) {
      if (line.match(/^##+\s*Used By\s*$/i)) {
        inUsedBySection = true;
        tableHasStarted = false;
        continue;
      }
      if (inUsedBySection) {
        const trimmedLine = line.trim();
        if (trimmedLine.startsWith("##")) {
          inUsedBySection = false;
          break;
        }
        if (trimmedLine.match(/^\|---\|/)) {
          tableHasStarted = true;
          continue;
        }
        if (tableHasStarted && trimmedLine.startsWith("|") && trimmedLine.endsWith("|")) {
          const match = trimmedLine.match(/^\|(.*)\|$/);
          if (match && match[1]) {
            if (!match[1].match(/^---\|/)) {
              rows.push(match[1]);
            }
          }
        } else if (tableHasStarted && trimmedLine !== "") {
          break;
        }
      }
    }
    return rows;
  }
  async discoverRecursively(initialProcessorName, initialProcessorFile, maxDepth = 3) {
    var _a, _b;
    new import_obsidian.Notice(`Starting smart recursive discovery for: ${initialProcessorName}. Max depth: ${maxDepth}`, 1e4);
    const aliasMap = await this.buildAliasMap();
    this.processedInCurrentRecursiveSearch = /* @__PURE__ */ new Set();
    const queue = [{ processorName: initialProcessorName, depth: 0 }];
    let discoveredCount = 0;
    let skippedCount = 0;
    while (queue.length > 0) {
      const current = queue.shift();
      if (!current) continue;
      let { processorName, depth } = current;
      const existingEntity = aliasMap.get(processorName.toLowerCase());
      let currentProcessorFile = existingEntity ? this.app.vault.getAbstractFileByPath(existingEntity.path) : null;
      if (currentProcessorFile) {
        const cache = this.app.metadataCache.getFileCache(currentProcessorFile);
        if (((_a = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _a["discovery-status"]) === "complete" && ((_b = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _b["last-discovered"])) {
          const lastRun = new Date(cache.frontmatter["last-discovered"]);
          const expiryDate = /* @__PURE__ */ new Date();
          expiryDate.setDate(expiryDate.getDate() - this.settings.discoveryCacheDays);
          if (lastRun > expiryDate) {
            if (this.settings.verboseDebug) console.log(`Skipping recently processed: ${processorName}`);
            skippedCount++;
            continue;
          }
        }
      }
      new import_obsidian.Notice(`Recursive (depth ${depth}): Processing ${processorName}...`);
      const { filePathName: sanitizedNameForTracking } = this.sanitizeNameForFilePathAndAlias(processorName);
      if (this.processedInCurrentRecursiveSearch.has(sanitizedNameForTracking)) continue;
      this.processedInCurrentRecursiveSearch.add(sanitizedNameForTracking);
      const isTopLevel = depth === 0;
      if (!currentProcessorFile) {
        currentProcessorFile = await this.ensureProcessorFile(processorName, true, isTopLevel);
      }
      if (!currentProcessorFile) continue;
      discoveredCount++;
      const searchData = await this.fetchProcessorSearchDataWithDiscovery(processorName);
      if (searchData == null ? void 0 : searchData.collectedRelationships) {
        const directSubNames = Array.from(new Set(searchData.collectedRelationships.filter((rel) => rel.PrimaryProcessor === processorName && rel.RelationshipType === "uses_subprocessor").map((rel) => rel.SubprocessorName.trim()).filter((name) => name)));
        const mergeDecisionsLog = [];
        if (depth < maxDepth - 1) {
          for (const subName of directSubNames) {
            const sanitizedSubNameForTracking = this.sanitizeNameForFilePathAndAlias(subName).filePathName;
            if (this.processedInCurrentRecursiveSearch.has(sanitizedSubNameForTracking)) continue;
            const existingMapping = aliasMap.get(subName.toLowerCase());
            let nameToQueue = subName;
            if (existingMapping) {
              nameToQueue = existingMapping.canonicalName;
              if (subName !== nameToQueue) {
                const decision = `Mapped discovered name "${subName}" to existing processor "${nameToQueue}".`;
                mergeDecisionsLog.push(decision);
              }
            } else {
              const { filePathName, originalNameAsAlias } = this.sanitizeNameForFilePathAndAlias(subName);
              const newPath = `${this.settings.processorsFolderPath}/${filePathName}.md`;
              aliasMap.set(subName.toLowerCase(), { path: newPath, canonicalName: originalNameAsAlias });
            }
            if (!queue.some((q) => q.processorName === nameToQueue)) {
              queue.push({ processorName: nameToQueue, depth: depth + 1 });
            }
          }
        }
        await this.persistSubprocessorInfo(processorName, currentProcessorFile, searchData, isTopLevel, mergeDecisionsLog);
        await this.updateDiscoveryStatus(currentProcessorFile, "complete");
      } else {
        await this.updateDiscoveryStatus(currentProcessorFile, "incomplete");
      }
      await new Promise((resolve) => setTimeout(resolve, 500));
    }
    new import_obsidian.Notice(`Recursive discovery complete. Processed ${discoveredCount} entities, skipped ${skippedCount} recent ones.`, 1e4);
    this.processedInCurrentRecursiveSearch.clear();
  }
  openFileSelectorMergeModal() {
    const files = this.app.vault.getMarkdownFiles().filter((file) => file.path.startsWith(this.settings.processorsFolderPath + "/"));
    if (files.length < 2) {
      new import_obsidian.Notice("There are not enough processor files to perform a merge.");
      return;
    }
    new FileSelectorMergeModal(this.app, files, (selectedFiles) => {
      new ForceMergeModal(this.app, selectedFiles, (survivor, duplicates) => {
        this.processManualMerge(survivor, duplicates);
      }).open();
    }).open();
  }
};
var ManualInputModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit, initialProcessorName) {
    super(app);
    this.processorName = "";
    this.listUrl = "";
    this.isPrimaryProcessor = true;
    this.onSubmit = onSubmit;
    this.initialProcessorName = initialProcessorName;
    if (this.initialProcessorName) {
      this.processorName = this.initialProcessorName;
    }
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Manually Add Subprocessor List URL" });
    new import_obsidian.Setting(contentEl).setName("Processor Name").setDesc("Enter the name of the primary processor (e.g., OpenAI).").addText((text) => {
      text.setPlaceholder("Enter processor name").setValue(this.processorName).onChange((value) => this.processorName = value).inputEl.setAttr("required", "true");
      if (this.initialProcessorName) {
        text.setDisabled(true);
      }
    });
    new import_obsidian.Setting(contentEl).setName("Subprocessor List URL").setDesc("Enter the direct URL to the subprocessor list or DPA page.").addText((text) => text.setPlaceholder("https://example.com/subprocessors").setValue(this.listUrl).onChange((value) => this.listUrl = value).inputEl.setAttr("required", "true"));
    new import_obsidian.Setting(contentEl).setName("Is a primary processor?").setDesc("Enable this if you are initiating a search on this processor. Disable if you are adding a subprocessor of another entity.").addToggle((toggle) => toggle.setValue(this.isPrimaryProcessor).onChange((value) => this.isPrimaryProcessor = value));
    new import_obsidian.Setting(contentEl).addButton((button) => button.setButtonText("Process URL").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.processorName, this.listUrl, this.isPrimaryProcessor);
    }));
  }
  onClose() {
    this.contentEl.empty();
  }
};
var SearchModal = class extends import_obsidian.Modal {
  constructor(app, settings, onSubmit) {
    super(app);
    this.processorName = "";
    this.settings = settings;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Discover Subprocessors" });
    let searchMethodNote = "Search will be performed using available configured methods.";
    if (this.settings.serpApiKey) {
      searchMethodNote = "Search will primarily use SerpAPI.";
    } else if (this.settings.rightbrainOrgId && this.settings.rightbrainProjectId && this.settings.rightbrainDuckDuckGoSearchTaskId) {
      searchMethodNote = "SerpAPI key not found. Search will use DuckDuckGo via RightBrain.";
    } else {
      searchMethodNote = "Neither SerpAPI nor RightBrain DuckDuckGo search is fully configured. Discovery might be limited.";
    }
    contentEl.createEl("p", { text: searchMethodNote });
    new import_obsidian.Setting(contentEl).setName("Processor Name").setDesc("Enter the name of the processor to search for (e.g., Stripe).").addText((text) => text.setPlaceholder("Enter processor name").setValue(this.processorName).onChange((value) => this.processorName = value).inputEl.setAttr("required", "true"));
    new import_obsidian.Setting(contentEl).addButton((button) => button.setButtonText("Start Discovery").setCta().onClick(() => {
      if (!this.processorName.trim()) {
        new import_obsidian.Notice("Processor Name is required.");
        return;
      }
      this.close();
      this.onSubmit(this.processorName);
    }));
  }
  onClose() {
    this.contentEl.empty();
  }
};
var ManualTextEntryModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit, initialProcessorName) {
    super(app);
    this.processorName = "";
    this.pastedText = "";
    this.isPrimaryProcessor = true;
    this.onSubmit = onSubmit;
    this.initialProcessorName = initialProcessorName;
    if (this.initialProcessorName) {
      this.processorName = this.initialProcessorName;
    }
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Input Subprocessor List from Text" });
    new import_obsidian.Setting(contentEl).setName("Processor Name").setDesc("Enter the name of the primary processor this text belongs to.").addText((text) => {
      text.setPlaceholder("Enter processor name").setValue(this.processorName).onChange((value) => this.processorName = value).inputEl.setAttr("required", "true");
      if (this.initialProcessorName) {
        text.setDisabled(true);
      }
    });
    new import_obsidian.Setting(contentEl).setName("Is a primary processor?").setDesc("Enable this if you are initiating a search on this processor. Disable if you are adding a subprocessor of another entity.").addToggle((toggle) => toggle.setValue(this.isPrimaryProcessor).onChange((value) => this.isPrimaryProcessor = value));
    contentEl.createEl("p", { text: "Paste the subprocessor list text below:" });
    const textArea = new import_obsidian.TextAreaComponent(contentEl).setPlaceholder("Paste text here...").setValue(this.pastedText).onChange((value) => this.pastedText = value);
    textArea.inputEl.rows = 10;
    textArea.inputEl.style.width = "100%";
    textArea.inputEl.setAttr("required", "true");
    new import_obsidian.Setting(contentEl).addButton((button) => button.setButtonText("Process Text").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.processorName, this.pastedText, this.isPrimaryProcessor);
    }));
  }
  onClose() {
    this.contentEl.empty();
  }
};
var ForceMergeModal = class extends import_obsidian.Modal {
  constructor(app, files, onSubmit) {
    super(app);
    this.survivor = null;
    this.files = files.sort((a, b) => a.basename.localeCompare(b.basename));
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Force Merge Processors" });
    contentEl.createEl("p", { text: 'Select the file to keep (the "survivor"). All other selected files will be merged into it and then deleted.' });
    let mergeButton;
    const radioGroup = contentEl.createDiv();
    this.files.forEach((file) => {
      const setting = new import_obsidian.Setting(radioGroup).setName(file.basename).setDesc(file.path);
      const radio = createEl("input", {
        type: "radio",
        cls: "force-merge-radio"
      });
      radio.name = "survivor-selection";
      radio.value = file.path;
      radio.onchange = () => {
        this.survivor = file;
        mergeButton.setDisabled(false).setCta(true);
      };
      setting.controlEl.appendChild(radio);
    });
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Cancel").onClick(() => this.close())).addButton((btn) => {
      mergeButton = btn;
      btn.setButtonText("Merge").setDisabled(true).onClick(() => {
        if (this.survivor) {
          const duplicates = this.files.filter((f) => f.path !== this.survivor.path);
          this.close();
          this.onSubmit(this.survivor, duplicates);
        }
      });
    });
  }
  onClose() {
    this.contentEl.empty();
  }
};
var FileSelectorMergeModal = class extends import_obsidian.Modal {
  constructor(app, files, onSubmit) {
    super(app);
    this.selectedFilePaths = /* @__PURE__ */ new Set();
    this.files = files.sort((a, b) => a.basename.localeCompare(b.basename));
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Select Files to Merge" });
    contentEl.createEl("p", { text: "Choose two or more processor files from the list below." });
    let nextButton;
    const checkboxGroup = contentEl.createDiv();
    checkboxGroup.addClass("processor-file-selector-list");
    this.files.forEach((file) => {
      const setting = new import_obsidian.Setting(checkboxGroup).setName(file.basename).setDesc(file.path);
      setting.addToggle((toggle) => {
        toggle.onChange((value) => {
          if (value) {
            this.selectedFilePaths.add(file.path);
          } else {
            this.selectedFilePaths.delete(file.path);
          }
          nextButton.setDisabled(this.selectedFilePaths.size < 2);
        });
      });
    });
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Cancel").onClick(() => this.close())).addButton((btn) => {
      nextButton = btn;
      btn.setButtonText("Next: Select Survivor").setCta().setDisabled(true).onClick(() => {
        const selectedFiles = this.files.filter((f) => this.selectedFilePaths.has(f.path));
        this.close();
        this.onSubmit(selectedFiles);
      });
    });
  }
};
var PasteEnvModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.pastedText = "";
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Complete Plugin Setup" });
    contentEl.createEl("p", { text: "Paste the entire block of environment variables from your RightBrain dashboard below. This will save your credentials and then automatically create the necessary AI tasks in your project." });
    const textArea = new import_obsidian.TextAreaComponent(contentEl).setPlaceholder('RB_ORG_ID="..."\nRB_PROJECT_ID="..."').onChange((value) => this.pastedText = value);
    textArea.inputEl.rows = 12;
    textArea.inputEl.style.width = "100%";
    textArea.inputEl.style.fontFamily = "monospace";
    new import_obsidian.Setting(contentEl).addButton((button) => button.setButtonText("Begin Setup").setCta().onClick(() => {
      if (this.pastedText.trim()) {
        this.runFullSetup();
        this.close();
      } else {
        new import_obsidian.Notice("Text area is empty.");
      }
    }));
  }
  onClose() {
    this.contentEl.empty();
  }
  /**
   * Parses the pasted text, saves credentials, then proceeds to set up tasks.
   */
  async runFullSetup() {
    const lines = this.pastedText.trim().split("\n");
    const settingsToUpdate = {};
    const keyMap = {
      "RB_ORG_ID": "rightbrainOrgId",
      "RB_PROJECT_ID": "rightbrainProjectId",
      "RB_CLIENT_ID": "rightbrainClientId",
      "RB_CLIENT_SECRET": "rightbrainClientSecret",
      "RB_API_URL": "rightbrainApiUrl",
      "RB_OAUTH2_URL": "rightbrainOauth2Url"
    };
    for (const line of lines) {
      const parts = line.split("=");
      if (parts.length < 2) continue;
      const key = parts[0].trim();
      let value = parts.slice(1).join("=").trim().replace(/["']/g, "");
      if (key in keyMap && value) {
        const settingKey = keyMap[key];
        settingsToUpdate[settingKey] = value;
      }
    }
    if (!settingsToUpdate.rightbrainOrgId || !settingsToUpdate.rightbrainProjectId || !settingsToUpdate.rightbrainClientId || !settingsToUpdate.rightbrainClientSecret || !settingsToUpdate.rightbrainApiUrl || !settingsToUpdate.rightbrainOauth2Url) {
      new import_obsidian.Notice("Setup failed. Pasted text is missing one or more required values.", 7e3);
      return;
    }
    this.plugin.settings = Object.assign(this.plugin.settings, settingsToUpdate);
    await this.plugin.saveSettings();
    new import_obsidian.Notice(`Successfully updated credentials.`);
    await new Promise((resolve) => setTimeout(resolve, 1e3));
    await this.plugin.setupRightBrainTasks({
      apiUrl: settingsToUpdate.rightbrainApiUrl,
      oauthUrl: settingsToUpdate.rightbrainOauth2Url,
      clientId: settingsToUpdate.rightbrainClientId,
      clientSecret: settingsToUpdate.rightbrainClientSecret,
      orgId: settingsToUpdate.rightbrainOrgId,
      projectId: settingsToUpdate.rightbrainProjectId
    });
  }
};
var ProcessorProcessorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Processor Processor Settings" });
    containerEl.createEl("h3", { text: "API Keys & Credentials" });
    new import_obsidian.Setting(containerEl).setName("SerpAPI Key").setDesc("Your SerpAPI Key for Google search functionality.").addText((text) => text.setPlaceholder("Enter your SerpAPI key").setValue(this.plugin.settings.serpApiKey).onChange(async (value) => {
      this.plugin.settings.serpApiKey = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "RightBrain Task Configuration" });
    new import_obsidian.Setting(containerEl).setName("RB Extract Entities: Input Field Name").setDesc('The parameter name your RB Extract Entities task expects for the input text (e.g., "page_text", "document_content").').addText((text) => text.setValue(this.plugin.settings.rightbrainExtractInputField).setPlaceholder("e.g., page_text").onChange(async (value) => {
      this.plugin.settings.rightbrainExtractInputField = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("RB Extract Entities: Output Field (Third-Party)").setDesc(`The field name in your RB Extract Entities task's JSON output for the list of third-party subprocessors (e.g., "third_party_subprocessors").`).addText((text) => text.setValue(this.plugin.settings.rightbrainExtractOutputThirdPartyField).setPlaceholder("e.g., third_party_subprocessors").onChange(async (value) => {
      this.plugin.settings.rightbrainExtractOutputThirdPartyField = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("RB Extract Entities: Output Field (Own Entities)").setDesc(`The field name in your RB Extract Entities task's JSON output for the list of own/affiliated entities (e.g., "own_entities").`).addText((text) => text.setValue(this.plugin.settings.rightbrainExtractOutputOwnEntitiesField).setPlaceholder("e.g., own_entities").onChange(async (value) => {
      this.plugin.settings.rightbrainExtractOutputOwnEntitiesField = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "General Settings" });
    new import_obsidian.Setting(containerEl).setName("Create Pages for Own Entities").setDesc('If enabled, separate Markdown pages will also be created for "own entities" identified during processing, not just third-party subprocessors.').addToggle((toggle) => toggle.setValue(this.plugin.settings.createPagesForOwnEntities).onChange(async (value) => {
      this.plugin.settings.createPagesForOwnEntities = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Verbose Debug Logging").setDesc("Enable detailed logging to the developer console for debugging purposes.").addToggle((toggle) => toggle.setValue(this.plugin.settings.verboseDebug).onChange(async (value) => {
      this.plugin.settings.verboseDebug = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Max Results Per Processor (Discovery)").setDesc("Maximum search results to process for each processor during initial discovery. Currently, the logic stops on the first verified list, effectively making this 1.").addText((text) => text.setValue(this.plugin.settings.maxResultsPerProcessor.toString()).setDisabled(true).onChange(async (value) => {
    }));
    new import_obsidian.Setting(containerEl).setName("Mapping Depth").setDesc("Set the maximum depth for the Map Subprocessor Relationships function (e.g., 2-5). Higher numbers will take much longer and use more API calls.").addText((text) => text.setPlaceholder("e.g., 3").setValue(this.plugin.settings.maxRecursiveDepth.toString()).onChange(async (value) => {
      const num = parseInt(value);
      if (!isNaN(num) && num > 0) {
        this.plugin.settings.maxRecursiveDepth = num;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName("Discovery Cache Duration (Days)").setDesc(`How many days to consider a processor's data "fresh". A processor with a "complete" status discovered within this period will be skipped during recursive runs.`).addText((text) => text.setPlaceholder("e.g., 30").setValue(this.plugin.settings.discoveryCacheDays.toString()).onChange(async (value) => {
      const num = parseInt(value);
      if (!isNaN(num) && num >= 0) {
        this.plugin.settings.discoveryCacheDays = num;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName("Processors Folder Path").setDesc('Path to the folder where processor and subprocessor notes will be stored (e.g., "Third Parties/Processors").').addText((text) => text.setPlaceholder("e.g., Processors").setValue(this.plugin.settings.processorsFolderPath).onChange(async (value) => {
      this.plugin.settings.processorsFolderPath = value || DEFAULT_SETTINGS.processorsFolderPath;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Analysis Logs Folder Path").setDesc('Path to the folder where analysis log notes for each processor will be stored (e.g., "Compliance/Logs").').addText((text) => text.setPlaceholder("e.g., Analysis Logs").setValue(this.plugin.settings.analysisLogsFolderPath).onChange(async (value) => {
      this.plugin.settings.analysisLogsFolderPath = value || DEFAULT_SETTINGS.analysisLogsFolderPath;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
